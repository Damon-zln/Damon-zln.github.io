<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damon的成长日记</title>
  
  <subtitle>Learn through living.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-25T05:53:47.757Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Damon Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试算法题 --- 畅融金服</title>
    <link href="http://yoursite.com/2019/02/25/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <id>http://yoursite.com/2019/02/25/面试算法题/</id>
    <published>2019-02-25T14:13:25.000Z</published>
    <updated>2020-02-25T05:53:47.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不知道为什么要写这个前言，总觉得这次的面试和以往不一样，所以就写一下心理历程吧。往常遇到的面试都是面试技术点的，比如java基础、Spring相关的框架、数据库相关的、JVM相关的等等，这次的面试，这些都不问，就一道算法题，做出来就面谈，做不出来就走人……QAQ</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>写一个方法，输入一个<strong>奇数</strong>，输出如下格式：</p><p>输入1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>输入3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">  <span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>输入5：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">12</span> <span class="number">8</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line">   <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">     <span class="number">1</span> <span class="number">5</span> <span class="number">8</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>输入7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">32</span> <span class="number">20</span> <span class="number">12</span> <span class="number">7</span>  <span class="number">1</span></span><br><span class="line">   <span class="number">12</span> <span class="number">8</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">      <span class="number">4</span>  <span class="number">3</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">12</span></span><br><span class="line">         <span class="number">1</span>  <span class="number">7</span>  <span class="number">12</span> <span class="number">20</span> <span class="number">32</span></span><br></pre></td></tr></table></figure><p><strong>要求：输出是一个平行四边形，且是中心对称的，并且上下要竖直不能错开（输出不可以用 \t 来格式化，要求计算空格）。</strong><br><a id="more"></a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>既然是中心对称的，那我们先从中间分开，看左边一半或是右边一半，这里我们先看右边一半吧，好理解一些，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span>  <span class="number">12</span></span><br><span class="line"><span class="number">7</span> <span class="number">12</span> <span class="number">20</span> <span class="number">32</span></span><br></pre></td></tr></table></figure></li><li><p>然后就是找规律：</p><ul><li><p>竖着看第一列，发现行数等于第一列的数字加一，然后除以2</p></li><li><p>每行的后面的数字等于前面的数字加上该数字上面的数字，如32=20+12</p></li><li><p>如果输入的n=7，那么最后一行是7，12，20，32，那么这四个数字的可以用下面的方法算出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入n=7,最后一行的数字：</span></span><br><span class="line">(<span class="number">2</span>^<span class="number">0</span>)*(n-<span class="number">0</span>)   (<span class="number">2</span>^<span class="number">1</span>)*(n-<span class="number">1</span>)   (<span class="number">2</span>^<span class="number">2</span>)*(n-<span class="number">2</span>)   (<span class="number">2</span>^<span class="number">3</span>)*(n-<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>至此，右边这一半已经解决了，就是算法怎么写的问题；右边的算法写出来之后，你会发现，把算法反过来写，就是左边的输出。</p></li><li><p>然后将两个输出组合在一起输出就能得到下面的结果，不是平行四边形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32</span> <span class="number">20</span> <span class="number">12</span> <span class="number">7</span>  <span class="number">1</span></span><br><span class="line"><span class="number">12</span> <span class="number">8</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line"><span class="number">4</span>  <span class="number">3</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">12</span></span><br><span class="line"><span class="number">1</span>  <span class="number">7</span>  <span class="number">12</span> <span class="number">20</span> <span class="number">32</span></span><br></pre></td></tr></table></figure></li><li><p>最后，就是上面要求提到的，需要计算空格了，最终结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入7</span></span><br><span class="line">--------------------------------</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">32</span> <span class="number">20</span> <span class="number">12</span> <span class="number">7</span>  <span class="number">1</span></span><br><span class="line">   <span class="number">12</span> <span class="number">8</span>  <span class="number">5</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line">      <span class="number">4</span>  <span class="number">3</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">12</span></span><br><span class="line">         <span class="number">1</span>  <span class="number">7</span>  <span class="number">12</span> <span class="number">20</span> <span class="number">32</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>注：由于题目指定了是奇数，所以我在代码里面没有写奇/偶数判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dazhan on 2019/2/25 22:27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareFormatter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法一：使用的是数学方法，次方运算   （面试的时候，现场想出来的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">format1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        String ss = String.valueOf((<span class="keyword">int</span>)(Math.pow(<span class="number">2</span>, ((n+<span class="number">1</span>)/<span class="number">2</span> -<span class="number">1</span>))*(n-((n+<span class="number">1</span>)/<span class="number">2</span>)+<span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">int</span> space = ss.length() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (n+<span class="number">1</span>)/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 输出平行四边形</span></span><br><span class="line">            String sp = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; i; m++) &#123;</span><br><span class="line">                <span class="keyword">while</span> (sp.length() &lt; space) &#123;</span><br><span class="line">                    sp = sp + <span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(sp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 左边一半</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = (n+<span class="number">1</span>)/<span class="number">2</span> -i; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                String value = String.valueOf((<span class="keyword">int</span>)(Math.pow(<span class="number">2</span>, j)*(n-(<span class="number">2</span>*i) -j +<span class="number">2</span>)));</span><br><span class="line">                <span class="comment">// 计算空格</span></span><br><span class="line">                <span class="keyword">while</span> (value.length() &lt; space) &#123;</span><br><span class="line">                    value = value + <span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 右边一半</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                String value = String.valueOf((<span class="keyword">int</span>)(Math.pow(<span class="number">2</span>, j)*(<span class="number">2</span>*i -<span class="number">1</span> -j)));</span><br><span class="line">                <span class="comment">// 计算空格</span></span><br><span class="line">                <span class="keyword">while</span> (value.length() &lt; space) &#123;</span><br><span class="line">                    value = value + <span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(value);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法二：使用的是二维数组     （原公司同事想出来的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">format2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = getMatrix(n);</span><br><span class="line">        formatMatrix(matrix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">formatMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> line = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> column = matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = matrix[line - <span class="number">1</span>][column - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> digitNum = String.valueOf(max).length();</span><br><span class="line">        String formatter = <span class="string">"%-"</span> + digitNum + <span class="string">"d"</span>;</span><br><span class="line">        String stringForZero = formatZero(digitNum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = line - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// print the matrix line by line reversely</span></span><br><span class="line">            printlineReversed(matrix[i], formatter, stringForZero);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// print the matrix line by line</span></span><br><span class="line">            <span class="keyword">int</span> revLine = line - i - <span class="number">1</span>;</span><br><span class="line">            printLine(matrix[revLine], formatter, stringForZero);</span><br><span class="line"></span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printLine</span><span class="params">(<span class="keyword">int</span>[] matrix, String formatter, String stringForZero)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> col = matrix.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(stringForZero);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(String.format(formatter, matrix[j]));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printlineReversed</span><span class="params">(<span class="keyword">int</span>[] matrix, String formatter, String zeroStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> col = matrix.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = col - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(zeroStr);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(String.format(formatter, matrix[j]));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatZero</span><span class="params">(<span class="keyword">int</span> digitNum)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digitNum; i++) &#123;</span><br><span class="line">            stringBuilder.append(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] getMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> line = n / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> column = line;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[line][column];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line; i++) &#123;</span><br><span class="line">            matrix[i][<span class="number">0</span>] = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                matrix[i][j] = matrix[i][j - <span class="number">1</span>] + matrix[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法三：使用的是一维数组      （原公司同事想出来的方法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">format3</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"1"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> loopNum = (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[] matrix = getMatrix2(loopNum);</span><br><span class="line"></span><br><span class="line">        formatMatrix(matrix, loopNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] getMatrix2(<span class="keyword">int</span> loopNum) &#123;</span><br><span class="line">        <span class="keyword">int</span> totalNum = loopNum * (loopNum + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[totalNum];</span><br><span class="line">        array[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> offset = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> prev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; totalNum; i += ++offset) &#123;</span><br><span class="line">            array[i] = array[prev] + <span class="number">2</span>;</span><br><span class="line">            prev = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> suffix = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; totalNum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                array[i] = array[i - <span class="number">1</span>] + array[suffix++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">formatLeadingSpaces</span><span class="params">(<span class="keyword">int</span> digitNum)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digitNum; i++) &#123;</span><br><span class="line">            stringBuilder.append(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// delimiter between number</span></span><br><span class="line">        stringBuilder.append(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">formatMatrix</span><span class="params">(<span class="keyword">int</span>[] matrix, <span class="keyword">int</span> loopNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> max = matrix[length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> digitNum = String.valueOf(max).length();</span><br><span class="line">        String formatter = <span class="string">"%-"</span> + digitNum + <span class="string">"d "</span>;</span><br><span class="line">        String leadingSpaces = formatLeadingSpaces(digitNum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> last = length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = loopNum; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> prefix = loopNum - i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// print leading spaces</span></span><br><span class="line">            <span class="comment">// (n) pieces of leading spaces in line (n)</span></span><br><span class="line">            <span class="comment">// n = 0 ~ (loopNum  - 1)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; prefix; p++) &#123;</span><br><span class="line">                System.out.print(leadingSpaces);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// print the left side</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                System.out.print(String.format(formatter, matrix[last--]));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// print the right side</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= prefix; k++) &#123;</span><br><span class="line">                System.out.print(String.format(formatter, matrix[first++]));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===============================================================================================</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by dazhan on 2019/2/25 22:27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareFormatterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法一：数学方法（次方）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFormat1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SquareFormatter formatter = <span class="keyword">new</span> SquareFormatter();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            formatter.format1(<span class="number">19</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法二：二维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFormat2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SquareFormatter formatter = <span class="keyword">new</span> SquareFormatter();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            formatter.format2(<span class="number">19</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法三：一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFormat3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SquareFormatter formatter = <span class="keyword">new</span> SquareFormatter();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            formatter.format3(<span class="number">19</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">===============================================================================================</span><br><span class="line">上面三个方法都同时运行<span class="number">1000</span>遍，使用的时间如下：</span><br><span class="line">testFormat1<span class="number">440</span>ms           数学方法（次方）</span><br><span class="line">testFormat2<span class="number">1</span>s <span class="number">108</span>ms        二维数组</span><br><span class="line">testFormat3<span class="number">535</span>ms           一维数组</span><br><span class="line">按照上面的结果来看，数学方法时间最短，二维数组时间最长。</span><br><span class="line">-----------------------------------------------------------------------------------------------</span><br><span class="line">最终结果如下：</span><br><span class="line"><span class="number">5120</span> <span class="number">2816</span> <span class="number">1536</span> <span class="number">832</span>  <span class="number">448</span>  <span class="number">240</span>  <span class="number">128</span>  <span class="number">68</span>   <span class="number">36</span>   <span class="number">19</span>   <span class="number">1</span>    </span><br><span class="line">     <span class="number">2304</span> <span class="number">1280</span> <span class="number">704</span>  <span class="number">384</span>  <span class="number">208</span>  <span class="number">112</span>  <span class="number">60</span>   <span class="number">32</span>   <span class="number">17</span>   <span class="number">3</span>    <span class="number">4</span>    </span><br><span class="line">          <span class="number">1024</span> <span class="number">576</span>  <span class="number">320</span>  <span class="number">176</span>  <span class="number">96</span>   <span class="number">52</span>   <span class="number">28</span>   <span class="number">15</span>   <span class="number">5</span>    <span class="number">8</span>    <span class="number">12</span>   </span><br><span class="line">               <span class="number">448</span>  <span class="number">256</span>  <span class="number">144</span>  <span class="number">80</span>   <span class="number">44</span>   <span class="number">24</span>   <span class="number">13</span>   <span class="number">7</span>    <span class="number">12</span>   <span class="number">20</span>   <span class="number">32</span>   </span><br><span class="line">                    <span class="number">192</span>  <span class="number">112</span>  <span class="number">64</span>   <span class="number">36</span>   <span class="number">20</span>   <span class="number">11</span>   <span class="number">9</span>    <span class="number">16</span>   <span class="number">28</span>   <span class="number">48</span>   <span class="number">80</span>   </span><br><span class="line">                         <span class="number">80</span>   <span class="number">48</span>   <span class="number">28</span>   <span class="number">16</span>   <span class="number">9</span>    <span class="number">11</span>   <span class="number">20</span>   <span class="number">36</span>   <span class="number">64</span>   <span class="number">112</span>  <span class="number">192</span>  </span><br><span class="line">                              <span class="number">32</span>   <span class="number">20</span>   <span class="number">12</span>   <span class="number">7</span>    <span class="number">13</span>   <span class="number">24</span>   <span class="number">44</span>   <span class="number">80</span>   <span class="number">144</span>  <span class="number">256</span>  <span class="number">448</span>  </span><br><span class="line">                                   <span class="number">12</span>   <span class="number">8</span>    <span class="number">5</span>    <span class="number">15</span>   <span class="number">28</span>   <span class="number">52</span>   <span class="number">96</span>   <span class="number">176</span>  <span class="number">320</span>  <span class="number">576</span>  <span class="number">1024</span> </span><br><span class="line">                                        <span class="number">4</span>    <span class="number">3</span>    <span class="number">17</span>   <span class="number">32</span>   <span class="number">60</span>   <span class="number">112</span>  <span class="number">208</span>  <span class="number">384</span>  <span class="number">704</span>  <span class="number">1280</span> <span class="number">2304</span> </span><br><span class="line">                                             <span class="number">1</span>    <span class="number">19</span>   <span class="number">36</span>   <span class="number">68</span>   <span class="number">128</span>  <span class="number">240</span>  <span class="number">448</span>  <span class="number">832</span>  <span class="number">1536</span> <span class="number">2816</span> <span class="number">5120</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>遇到算法题的时候，千万不要放弃，把思路一点一点写下来，这样问题就解决了一半，这道题，我觉得难点就是把正序输出和反序输出组合起来的时候，有点费脑子……..当然了，我这个解法（方法一）是最常规的方法，肯定有比这个简单的方法的。。。只是当时时间有限，只能这样做了！QAQ</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不知道为什么要写这个前言，总觉得这次的面试和以往不一样，所以就写一下心理历程吧。往常遇到的面试都是面试技术点的，比如java基础、Spring相关的框架、数据库相关的、JVM相关的等等，这次的面试，这些都不问，就一道算法题，做出来就面谈，做不出来就走人……QAQ&lt;/p&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;写一个方法，输入一个&lt;strong&gt;奇数&lt;/strong&gt;，输出如下格式：&lt;/p&gt;
&lt;p&gt;输入1：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入3：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入5：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入7：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;要求：输出是一个平行四边形，且是中心对称的，并且上下要竖直不能错开（输出不可以用 \t 来格式化，要求计算空格）。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>求连续子数组最大和问题</title>
    <link href="http://yoursite.com/2019/02/19/%E6%B1%82%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E6%9C%80%E5%A4%A7%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/02/19/求连续子数组最大和问题/</id>
    <published>2019-02-19T11:13:25.000Z</published>
    <updated>2020-02-25T05:53:47.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在一个数组中（数组中的元素可以是负数），找出一个连续的子数组，要求子数组中的元素相加，和最大；<br>然后输出这个最大值和最大子数组。</p><p>举例：</p><p>数组A = {1，3，-5，7，6，-1，3}，数组A的和最大的连续子数组是{7，6，-1，3}，最大和是15.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>先将这个数组中所有的连续子数组都找出来</li><li>再将每个子数组中的元素求和</li><li>比较出最大和的子数组<a id="more"></a><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Damon-zln on 2019/2/19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(findAllSubArray(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StringBuilder <span class="title">findAllSubArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">                list.add(arr[j]);</span><br><span class="line">                sb.append(list).append(<span class="string">"|"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">执行结果：</span><br><span class="line">[<span class="number">1</span>]|[<span class="number">1</span>, <span class="number">2</span>]|[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]|[<span class="number">2</span>]|[<span class="number">2</span>, <span class="number">3</span>]|[<span class="number">3</span>]|</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line">到这里，我的想法是，既然我们已经将子数组找出来了，那么我们可以在找子数组的时候，</span><br><span class="line">将子数组的元素和也算出来，有了子数组的和之后，就可以再添加一个判断，筛选出和最大</span><br><span class="line">的子数组，完美！！！</span><br><span class="line">具体代码如下：</span><br><span class="line">================================================================================</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Damon-zln on 2019/2/19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">3</span>, -<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, -<span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(findMaxSubArray(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连续子数组的最大和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 输入的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map ：key是最大和，value是最大和对应的子数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, StringBuilder&gt; <span class="title">findMaxSubArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 先将数组第一位赋值给max</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 初始化一个map，key用来存放最大连续子数组的和，value用来存放最大连续子数组</span></span><br><span class="line">        Map&lt;Integer, StringBuilder&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化StringBuilder，用来存放和最大的子数组</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">// 第一个循环用来确定子数组开始的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 初始化一个集合用来存放子数组的元素</span></span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">// 子数组内元素求和</span></span><br><span class="line">                sum += arr[j];</span><br><span class="line">                <span class="comment">// 存放子数组的元素</span></span><br><span class="line">                list.add(arr[j]);</span><br><span class="line">                <span class="comment">// 判断比较当前子数组元素和是不是最大</span></span><br><span class="line">                <span class="keyword">if</span> (sum &gt; max) &#123;</span><br><span class="line">                    max = sum;</span><br><span class="line">                    <span class="comment">// 删除之前存放的子数组</span></span><br><span class="line">                    sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">                    <span class="comment">// 添加当前的子数组</span></span><br><span class="line">                    sb.append(list);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(max, sb);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">执行结果：</span><br><span class="line">&#123;<span class="number">15</span>=[<span class="number">7</span>, <span class="number">6</span>, -<span class="number">1</span>, <span class="number">3</span>]&#125;</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line">到这里，基本已经完成了。然后，我去看了一下别人的做法，发现别人用一个循环就解决了</span><br><span class="line">问题，脑子里立刻就浮现了四个字：卧！槽！牛！逼！</span><br><span class="line">代码如下：</span><br><span class="line">================================================================================</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Damon-zln on 2019/2/19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">3</span>, -<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, -<span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(findMaxSubArray(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, StringBuilder&gt; <span class="title">findMaxSubArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        Map&lt;Integer, StringBuilder&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">            list.add(arr[i]);</span><br><span class="line">            <span class="keyword">if</span> (sum &gt; max) &#123;</span><br><span class="line">                max = sum;</span><br><span class="line">                sb.delete(<span class="number">0</span>, sb.length());</span><br><span class="line">                sb.append(list);</span><br><span class="line">            <span class="comment">// 如果累加和出现小于0的情况, 则和最大的子序列肯定不可能包含前面的元素</span></span><br><span class="line">            <span class="comment">// 这时将累加和置0，从下个元素重新开始累加</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(max, sb);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">执行结果：</span><br><span class="line">&#123;<span class="number">15</span>=[<span class="number">7</span>, <span class="number">6</span>, -<span class="number">1</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h3><p>做了这道题，我感觉算法这个东西，真的是很牛逼，好的算法，可以极大的提升效率。</p><p>当我准备完结这道题的时候，我脑子里又冒出了一个问题：如果存在最大值的子数组不止一<br>个呢？目前我只是取到了第一个…………我的天，这道题还没完~~~~</p><p>未完…………….待续…………………QAQ</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;在一个数组中（数组中的元素可以是负数），找出一个连续的子数组，要求子数组中的元素相加，和最大；&lt;br&gt;然后输出这个最大值和最大子数组。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;数组A = {1，3，-5，7，6，-1，3}，数组A的和最大的连续子数组是{7，6，-1，3}，最大和是15.&lt;/p&gt;
&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;先将这个数组中所有的连续子数组都找出来&lt;/li&gt;
&lt;li&gt;再将每个子数组中的元素求和&lt;/li&gt;
&lt;li&gt;比较出最大和的子数组&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>常用设计模式</title>
    <link href="http://yoursite.com/2019/02/17/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/02/17/常用设计模式/</id>
    <published>2019-02-17T10:13:25.000Z</published>
    <updated>2020-02-25T05:53:47.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1. 单例模式"></a>1. 单例模式</h3><ul><li><p>总结：一个类在JVM虚拟机中只有一个对象（永远是同一个），并提供获取该实例的全局访问点（必须是静态方法）</p></li><li><p>解决什么问题：</p><ul><li>对象的唯一性</li><li>节省系统资源</li></ul></li><li><p>项目中使用：</p><ul><li>需要频繁创建和销毁的对象</li><li>创建对象耗时长，耗费资源多，但又经常用到的对象</li><li>频繁访问的数据库或文件对象</li><li>工具类对象<a id="more"></a></li></ul></li><li><p>模式结构：</p><ul><li><p>饿汉模式代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 17:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> HungrySingleton</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungrySingleton hungrySingleton = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungrySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>懒汉模式代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 17:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> LazySingleton</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton lazySingleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazySingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            lazySingleton = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双重检查代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 17:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> DoubleCheckSingleton</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckSingleton doubleCheckSingleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (doubleCheckSingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (doubleCheckSingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    doubleCheckSingleton = <span class="keyword">new</span> DoubleCheckSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doubleCheckSingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-工厂模式（简单的）"><a href="#2-工厂模式（简单的）" class="headerlink" title="2. 工厂模式（简单的）"></a>2. 工厂模式（简单的）</h3><ul><li><p>总结：使用方法代替new关键字来创建对象</p></li><li><p>解决什么问题：</p><ul><li>解耦，将对象的创建和使用的过程分开</li><li>降低代码的重复</li><li>减少使用者因为对象的创建逻辑导致的错误</li></ul></li><li><p>项目中使用：</p><ul><li>对象的创建/实例化准备工作复杂，需要初始化的参数多</li><li>父子类的调用或在业务中易发生改变的对象</li></ul></li><li><p>模式结构：写一个对外声明的方法，方法里面使用new关键字代替</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 20:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Human 产品的抽象接口 人类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 20:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Man 男人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男人"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 20:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Woman 女人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">implements</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女人"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 20:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> SampleFactory 工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Human <span class="title">makeHuman</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"man"</span>.equals(type)) &#123;</span><br><span class="line">            Human man = <span class="keyword">new</span> Man();</span><br><span class="line">            <span class="keyword">return</span> man;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"woman"</span>.equals(type)) &#123;</span><br><span class="line">            Human woman = <span class="keyword">new</span> Woman();</span><br><span class="line">            <span class="keyword">return</span> woman;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"无法生产"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 20:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Client 工厂生产测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Human man = SampleFactory.makeHuman(<span class="string">"man"</span>);</span><br><span class="line">        man.say();</span><br><span class="line">        Human woman = SampleFactory.makeHuman(<span class="string">"woman"</span>);</span><br><span class="line">        woman.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-代理模式"><a href="#3-代理模式" class="headerlink" title="3. 代理模式"></a>3. 代理模式</h3><ul><li><p>总结：通过代理类，控制其他对象对当前对象的访问</p></li><li><p>解决什么问题：</p><ul><li>不能直接访问某对象</li><li>开销大的对象</li></ul></li><li><p>项目中使用：</p><ul><li>控制访问权限</li><li>对大对象的访问权限</li></ul></li><li><p>模式结构：代理类和被代理类实现同一个接口，用户访问的时候先访问代理对象，然后让代理对象去访问被代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 21:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> People 服务类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Quanli</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 21:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Mayun 被代理的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mayun</span> <span class="keyword">implements</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"满汉全席"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"唱K"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Quanli</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"机票"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 21:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Lvshi 代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lvshi</span> <span class="keyword">implements</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Quanli</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Mayun().Quanli();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 21:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        People person = <span class="keyword">new</span> Lvshi();</span><br><span class="line">        person.Quanli();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-策略模式"><a href="#4-策略模式" class="headerlink" title="4. 策略模式"></a>4. 策略模式</h3><ul><li><p>总结：定义一些列算法，并可以相互替换（条条大路通罗马的意思）</p></li><li><p>解决什么问题：</p><ul><li>同一件事可以有多种方法选择</li></ul></li><li><p>项目中使用：</p><ul><li>购物车的付款方式</li></ul></li><li><p>模式结构：声明一个顶级接口，定义一个策略方法，具体的实例都要实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 21:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Cart 购物车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 21:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> WeChat</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChat</span> <span class="keyword">implements</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"微信支付"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 21:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Alipay</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alipay</span> <span class="keyword">implements</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"支付宝支付"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 21:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> BankCard</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankCard</span> <span class="keyword">implements</span> <span class="title">Cart</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"银行卡支付"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 21:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cart weChat = <span class="keyword">new</span> WeChat();</span><br><span class="line">        Cart alipay = <span class="keyword">new</span> Alipay();</span><br><span class="line">        Cart bankCard = <span class="keyword">new</span> BankCard();</span><br><span class="line">        weChat.pay();</span><br><span class="line">        alipay.pay();</span><br><span class="line">        bankCard.pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-模板模式"><a href="#5-模板模式" class="headerlink" title="5. 模板模式"></a>5. 模板模式</h3><ul><li><p>总结：父类定义流程，子类实现流程</p></li><li><p>解决什么问题：</p><ul><li>业务千变万化，但是流程是有规定的</li></ul></li><li><p>项目中使用：</p><ul><li>基类的实现都是模板模式，如：BaseDao、BaseService</li></ul></li><li><p>模式结构：定义一个抽象父类定义流程，或者常用方法和常量，子类继承父类，实现具体的细节方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 22:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> School</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regulation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        selfStudy();</span><br><span class="line">        classBegin();</span><br><span class="line">        noonBreak();</span><br><span class="line">        examination();</span><br><span class="line">        leaveSchool();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">selfStudy</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">classBegin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">noonBreak</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">examination</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">leaveSchool</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 22:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> StudentA</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentA</span> <span class="keyword">extends</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">selfStudy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"selfStudy()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">classBegin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"classBegin()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">noonBreak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"noonBreak()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">examination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"examination()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">leaveSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"leaveSchool()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 22:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> StudentB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentB</span> <span class="keyword">extends</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">selfStudy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"selfStudy()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">classBegin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"classBegin()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">noonBreak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"noonBreak()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">examination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"examination()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">leaveSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"leaveSchool()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-单例模式&quot;&gt;&lt;a href=&quot;#1-单例模式&quot; class=&quot;headerlink&quot; title=&quot;1. 单例模式&quot;&gt;&lt;/a&gt;1. 单例模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;总结：一个类在JVM虚拟机中只有一个对象（永远是同一个），并提供获取该实例的全局访问点（必须是静态方法）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决什么问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象的唯一性&lt;/li&gt;
&lt;li&gt;节省系统资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目中使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要频繁创建和销毁的对象&lt;/li&gt;
&lt;li&gt;创建对象耗时长，耗费资源多，但又经常用到的对象&lt;/li&gt;
&lt;li&gt;频繁访问的数据库或文件对象&lt;/li&gt;
&lt;li&gt;工具类对象&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Java笔记" scheme="http://yoursite.com/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java类初始化顺序</title>
    <link href="http://yoursite.com/2019/02/17/java%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/02/17/java类初始化顺序/</id>
    <published>2019-02-17T06:15:00.000Z</published>
    <updated>2020-02-25T05:53:47.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java类中的初始化顺序"><a href="#Java类中的初始化顺序" class="headerlink" title="Java类中的初始化顺序"></a>Java类中的初始化顺序</h3><ul><li>静态属性</li><li>静态代码块</li><li>普通属性（非静态）</li><li>普通代码块（非静态）</li><li>构造函数</li><li>方法<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> per.dazhan.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Damon-zln</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/17 14:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> demo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * java类中的初始化顺序</span></span><br><span class="line"><span class="comment">     * 1. 静态属性: 带有static关键字定义的属性</span></span><br><span class="line"><span class="comment">     * 2. 静态代码块: static&#123;&#125;</span></span><br><span class="line"><span class="comment">     * 3. 普通属性: 不带static关键字定义的属性</span></span><br><span class="line"><span class="comment">     * 4. 普通代码块: &#123;&#125;</span></span><br><span class="line"><span class="comment">     * 5. 构造函数: 与类名一样的方法</span></span><br><span class="line"><span class="comment">     * 6. 方法: 普通方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String staticField = getStaticField();</span><br><span class="line">    <span class="comment">// 普通属性</span></span><br><span class="line">    <span class="keyword">private</span> String field = getField();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态方法块初始化----2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"普通方法块初始化----4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数初始化----5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getStaticField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String staticField = <span class="string">"staticField"</span>;</span><br><span class="line">        System.out.println(<span class="string">"静态属性初始化----1"</span>);</span><br><span class="line">        <span class="keyword">return</span> staticField;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String field = <span class="string">"field"</span>;</span><br><span class="line">        System.out.println(<span class="string">"普通属性初始化----3"</span>);</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">=================================================================================</span><br><span class="line">执行结果：</span><br><span class="line">静态属性初始化----<span class="number">1</span></span><br><span class="line">静态方法块初始化----<span class="number">2</span></span><br><span class="line">普通属性初始化----<span class="number">3</span></span><br><span class="line">普通方法块初始化----<span class="number">4</span></span><br><span class="line">构造函数初始化----<span class="number">5</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="父类与子类-（普通类）"><a href="#父类与子类-（普通类）" class="headerlink" title="父类与子类 （普通类）"></a>父类与子类 （普通类）</h3><ul><li>父类 （如上）</li><li>继承的子类<ul><li>父类静态属性</li><li>父类静态代码块</li><li>子类静态属性</li><li>子类静态代码块</li><li>父类普通属性</li><li>父类普通代码块</li><li>父类构造函数</li><li>子类普通属性</li><li>子类普通代码块</li><li>子类构造函数</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String staticField = getStaticField();</span><br><span class="line">    <span class="comment">// 普通属性</span></span><br><span class="line">    <span class="keyword">private</span> String field = getField();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类--静态方法块初始化----2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通代码块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类--普通方法块初始化----4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"子类--构造函数初始化----5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getStaticField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String staticField = <span class="string">"staticField"</span>;</span><br><span class="line">        System.out.println(<span class="string">"子类--静态属性初始化----1"</span>);</span><br><span class="line">        <span class="keyword">return</span> staticField;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getField</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String field = <span class="string">"field"</span>;</span><br><span class="line">        System.out.println(<span class="string">"子类--普通属性初始化----3"</span>);</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">=========================================================================</span><br><span class="line">main方法执行<span class="keyword">new</span> B（）；</span><br><span class="line">执行结果：</span><br><span class="line">静态属性初始化----<span class="number">1</span></span><br><span class="line">静态方法块初始化----<span class="number">2</span></span><br><span class="line">子类--静态属性初始化----<span class="number">1</span></span><br><span class="line">子类--静态方法块初始化----<span class="number">2</span></span><br><span class="line">普通属性初始化----<span class="number">3</span></span><br><span class="line">普通方法块初始化----<span class="number">4</span></span><br><span class="line">构造函数初始化----<span class="number">5</span></span><br><span class="line">子类--普通属性初始化----<span class="number">3</span></span><br><span class="line">子类--普通方法块初始化----<span class="number">4</span></span><br><span class="line">子类--构造函数初始化----<span class="number">5</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="接口-抽象类-实现类"><a href="#接口-抽象类-实现类" class="headerlink" title="接口-抽象类-实现类"></a>接口-抽象类-实现类</h3><ul><li>接口静态变量</li><li>抽象类静态变量</li><li>抽象类静态代码块</li><li>实现类静态变量</li><li>实现类静态代码块</li><li>抽象类普通变量</li><li>抽象类普通代码块</li><li>抽象类构造函数</li><li>实现类普通变量</li><li>实现类普通代码块</li><li>实现类构造函数</li></ul><p>注意：</p><ol><li>接口中声明的变量都是final，必须实例化，子类无法修改，固定值</li><li>接口中可以有静态方法，不能有普通方法，普通方法需要用default添加默认实现</li><li>接口中没有静态代码块、普通变量、普通代码块、构造函数</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java类中的初始化顺序&quot;&gt;&lt;a href=&quot;#Java类中的初始化顺序&quot; class=&quot;headerlink&quot; title=&quot;Java类中的初始化顺序&quot;&gt;&lt;/a&gt;Java类中的初始化顺序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;静态属性&lt;/li&gt;
&lt;li&gt;静态代码块&lt;/li&gt;
&lt;li&gt;普通属性（非静态）&lt;/li&gt;
&lt;li&gt;普通代码块（非静态）&lt;/li&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;li&gt;方法&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Java笔记" scheme="http://yoursite.com/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装数据库</title>
    <link href="http://yoursite.com/2019/01/24/docker%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2019/01/24/docker安装数据库/</id>
    <published>2019-01-24T07:13:25.000Z</published>
    <updated>2020-02-25T05:53:47.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-docker安装mysql5-7"><a href="#1-docker安装mysql5-7" class="headerlink" title="1. docker安装mysql5.7"></a>1. docker安装mysql5.7</h3><ul><li><p>查看镜像</p><p><code>docker search mysql</code></p></li><li><p>拉取镜像</p><p><code>docker pull mysql:5.7</code></p><a id="more"></a></li><li><p>运行镜像</p><p><code>docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</code></p><ul><li><p>参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-d 标识是让 docker 容器在后台运行。</span><br><span class="line">-p 标识通知 Docker 将容器内部使用的网络端口映射到我们使用的主机上。</span><br><span class="line">–name 定义一个容器的名字，如果在执行docker run时没有指定Name，那么deamon会自动生成一个随机数字符串当做UUID。</span><br><span class="line">-e 设置环境变量，或者覆盖已存在的环境变量</span><br><span class="line">3306:3306 将容器的3306端口映射到本机的3306端口 (左边是宿主机端口，右边是容器内端口)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用脚本 + crontab 方式定期备份运行在主机docker 容器内部数据</p><p>备份脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span> author: Damon Zhang</span><br><span class="line"><span class="meta">#</span> description: back up web_scrape database weekly</span><br><span class="line"></span><br><span class="line">docker exec -i mysql bash &lt;&lt; 'EOF'</span><br><span class="line"></span><br><span class="line">rm web_scrape_*</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -proot web_scrape &gt; web_scrape_$(date +%Y_%m_%d).sql</span><br><span class="line"></span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">basepath=$(cd `dirname $0`; pwd)/mysql</span><br><span class="line"></span><br><span class="line">if [ ! -d "$basepath" ]; then</span><br><span class="line">   mkdir $basepath</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">docker cp mysql:/web_scrape_$(date +%Y_%m_%d).sql $basepath</span><br><span class="line"></span><br><span class="line">gzip $basepath/web_scrape_$(date +%Y_%m_%d).sql</span><br></pre></td></tr></table></figure><p>添加crontab任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 每周日早上6点备份数据库</span><br><span class="line">0 6 * * 0 . /etc/profile; /bin/sh /home/damon.zhang/backup/mysql_backup.sh</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ol><li>注意一定要添加“ . /etc/profile;” ，这句用于将环境变量include进当前脚本的执行环境</li><li><code>/home/damon.zhang/backup/mysql_backup.sh</code> 这个是脚本的绝对路径</li></ol></blockquote><p>重启crontabd服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond restart</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-docker安装redis"><a href="#2-docker安装redis" class="headerlink" title="2. docker安装redis"></a>2. docker安装redis</h3><ul><li><p>查看镜像</p><p><code>docker search redis</code></p></li><li><p>拉取镜像</p><p><code>docker pull redis</code></p></li><li><p>运行镜像</p><p><code>docker run --name redis -p 6379:6379 -d --restart=always redis:latest redis-server --appendonly yes --requirepass &quot;foobared&quot;</code></p><ul><li><p>参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-p 6379:6379 :将容器内端口映射到宿主机端口（左边是宿主机端口，右边是容器内端口）</span><br><span class="line">redis-server –appendonly yes : 在容器执行redis-server启动命令，并打开redis持久化配置 </span><br><span class="line">--requirepass “your passwd” :设置认证密码 </span><br><span class="line">–-restart=always : 随docker启动而启动</span><br><span class="line">--name redis ：指定容器的名字</span><br><span class="line">-d : 后台运行</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-docker安装mysql5-7&quot;&gt;&lt;a href=&quot;#1-docker安装mysql5-7&quot; class=&quot;headerlink&quot; title=&quot;1. docker安装mysql5.7&quot;&gt;&lt;/a&gt;1. docker安装mysql5.7&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看镜像&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker search mysql&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拉取镜像&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker pull mysql:5.7&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://yoursite.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>常用命令总结</title>
    <link href="http://yoursite.com/2018/12/21/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/12/21/常用命令总结/</id>
    <published>2018-12-21T11:13:25.000Z</published>
    <updated>2020-02-25T05:53:47.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-从一个文件中抽取出包含指定字段的行，并保存到新文件"><a href="#1-从一个文件中抽取出包含指定字段的行，并保存到新文件" class="headerlink" title="1. 从一个文件中抽取出包含指定字段的行，并保存到新文件"></a>1. 从一个文件中抽取出包含指定字段的行，并保存到新文件</h3><p><code>awk &#39;BEGIN{FS=&quot;|&quot;;OFS=&quot;|&quot;} NR==FNR{a[$1]=$1} NR&gt;FNR{if ($9 in a) print $0}&#39; file1 file2 &gt; file3</code></p><p>注：将指定的字段写到file1文件（如果有多个指定字段，一行写一个），file2是要抽取的文件</p><h3 id="2-格式化文件，将文件每N行合并为一行-（该命令是每19行合并为一行）"><a href="#2-格式化文件，将文件每N行合并为一行-（该命令是每19行合并为一行）" class="headerlink" title="2. 格式化文件，将文件每N行合并为一行 （该命令是每19行合并为一行）"></a>2. 格式化文件，将文件每N行合并为一行 （该命令是每19行合并为一行）</h3><p><code>awk &#39;{ printf &quot;%s&quot;, $0; if (NR % 19 == 0) print &quot;&quot;; else printf &quot;|&quot; }&#39; value.txt &gt;&gt; all.txt</code></p><h3 id="3-统计文件中重复记录数"><a href="#3-统计文件中重复记录数" class="headerlink" title="3. 统计文件中重复记录数"></a>3. 统计文件中重复记录数</h3><p><code>awk &#39;BEGIN{FS=&quot;|&quot;;OFS=&quot;|&quot;} {a[$0]++} END{for(i in a){print a[i],i}}&#39; file.txt &gt; newName.txt</code><br><a id="more"></a></p><h3 id="4-去除文件中重复的记录"><a href="#4-去除文件中重复的记录" class="headerlink" title="4. 去除文件中重复的记录"></a>4. 去除文件中重复的记录</h3><p><code>awk &#39;!a[$0]++&#39; filename &gt; newFilename</code></p><h3 id="5-txt转csv"><a href="#5-txt转csv" class="headerlink" title="5. txt转csv"></a>5. txt转csv</h3><p><code>cat test.txt | tr &quot;[[:space:]]&quot; &quot;\t&quot; &gt;test.csv</code></p><blockquote><p>注：<code>cat test.txt | tr &quot;old value&quot; &quot;new value&quot; &gt; test.csv</code></p></blockquote><h3 id="6-Kill掉指定名称的进程"><a href="#6-Kill掉指定名称的进程" class="headerlink" title="6. Kill掉指定名称的进程"></a>6. Kill掉指定名称的进程</h3><p><code>ps -ef | grep -w &#39;nameprocess&#39; | grep -v grep | cut -c 10-14 | xargs kill -9</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“ps　-ef”是查看所有进程的命令。这时检索出的进程将作为下一条命令“grep“的输入，注意要结束其它程序时，请将上面命令中的nameprocess替换成其它程序名，-w &apos;nameprocess&apos; 强制 PATTERN 仅完全匹配字词。 </span><br><span class="line">“grep -v grep”是在列出的进程中去除含有关键字“grep”的进程。 </span><br><span class="line">“cut -c 10-14”是截取输入行的第10个字符到第14个字符，而这正好是进程号PID，或者根据自己实际的情况可以调整字符的截取位置。 </span><br><span class="line">“xargs kill -9”中的xargs命令是用来把前面命令的输出结果（PID）作为“kill -9”命令的参数，并执行该命令。 </span><br><span class="line">“kill -9”会强行杀掉指定进程，这样就成功清除了同名进程。</span><br></pre></td></tr></table></figure><h3 id="7-ps-ef-grep-详解"><a href="#7-ps-ef-grep-详解" class="headerlink" title="7. ps -ef | grep 详解"></a>7. <code>ps -ef | grep</code> 详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ps命令将某个进程显示出来 </span><br><span class="line">grep命令是查找 </span><br><span class="line">中间的|是管道命令 是指ps命令与grep同时执行 </span><br><span class="line">PS是LINUX下最常用的也是非常强大的进程查看命令 </span><br><span class="line">grep命令是查找，是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。 </span><br><span class="line">grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。 </span><br><span class="line">以下这条命令是检查java 进程是否存在：ps -ef |grep java </span><br><span class="line">字段含义如下： </span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">UID       PID       PPID      C     STIME    TTY       TIME         CMD </span><br><span class="line">zzw      14124      13991     0     00:38    pts/0     00:00:00     grep --color=auto dae</span><br><span class="line">--------------------------------------------------------------------------------------------</span><br><span class="line">UID     ：程序被该 UID 所拥有 </span><br><span class="line">PID     ：就是这个程序的 ID  </span><br><span class="line">PPID    ：则是其上级父程序的ID </span><br><span class="line">C       ：CPU使用的资源百分比 </span><br><span class="line">STIME   ：系统启动时间 </span><br><span class="line">TTY     ：登入者的终端机位置 </span><br><span class="line">TIME    ：使用掉的CPU时间。 </span><br><span class="line">CMD     ：所下达的是什么指令</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-从一个文件中抽取出包含指定字段的行，并保存到新文件&quot;&gt;&lt;a href=&quot;#1-从一个文件中抽取出包含指定字段的行，并保存到新文件&quot; class=&quot;headerlink&quot; title=&quot;1. 从一个文件中抽取出包含指定字段的行，并保存到新文件&quot;&gt;&lt;/a&gt;1. 从一个文件中抽取出包含指定字段的行，并保存到新文件&lt;/h3&gt;&lt;p&gt;&lt;code&gt;awk &amp;#39;BEGIN{FS=&amp;quot;|&amp;quot;;OFS=&amp;quot;|&amp;quot;} NR==FNR{a[$1]=$1} NR&amp;gt;FNR{if ($9 in a) print $0}&amp;#39; file1 file2 &amp;gt; file3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注：将指定的字段写到file1文件（如果有多个指定字段，一行写一个），file2是要抽取的文件&lt;/p&gt;
&lt;h3 id=&quot;2-格式化文件，将文件每N行合并为一行-（该命令是每19行合并为一行）&quot;&gt;&lt;a href=&quot;#2-格式化文件，将文件每N行合并为一行-（该命令是每19行合并为一行）&quot; class=&quot;headerlink&quot; title=&quot;2. 格式化文件，将文件每N行合并为一行 （该命令是每19行合并为一行）&quot;&gt;&lt;/a&gt;2. 格式化文件，将文件每N行合并为一行 （该命令是每19行合并为一行）&lt;/h3&gt;&lt;p&gt;&lt;code&gt;awk &amp;#39;{ printf &amp;quot;%s&amp;quot;, $0; if (NR % 19 == 0) print &amp;quot;&amp;quot;; else printf &amp;quot;|&amp;quot; }&amp;#39; value.txt &amp;gt;&amp;gt; all.txt&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-统计文件中重复记录数&quot;&gt;&lt;a href=&quot;#3-统计文件中重复记录数&quot; class=&quot;headerlink&quot; title=&quot;3. 统计文件中重复记录数&quot;&gt;&lt;/a&gt;3. 统计文件中重复记录数&lt;/h3&gt;&lt;p&gt;&lt;code&gt;awk &amp;#39;BEGIN{FS=&amp;quot;|&amp;quot;;OFS=&amp;quot;|&amp;quot;} {a[$0]++} END{for(i in a){print a[i],i}}&amp;#39; file.txt &amp;gt; newName.txt&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>执行docker命令遇到 Get Permission Denied</title>
    <link href="http://yoursite.com/2018/11/13/docker%E5%91%BD%E4%BB%A4%E9%81%87%E5%88%B0Permission%20Denied/"/>
    <id>http://yoursite.com/2018/11/13/docker命令遇到Permission Denied/</id>
    <published>2018-11-13T08:36:12.000Z</published>
    <updated>2020-02-25T05:53:47.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="执行docker命令遇到-Get-Permission-Denied"><a href="#执行docker命令遇到-Get-Permission-Denied" class="headerlink" title="执行docker命令遇到 Get Permission Denied"></a>执行docker命令遇到 <strong>Get Permission Denied</strong></h3><ul><li><p>安装完docker后，执行docker相关命令，出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.37/images/json: dial unix /var/run/docker.sock: connect: permission denied</span><br></pre></td></tr></table></figure></li><li><p>原因：</p><p>摘自dockermannual上的一段话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manage Docker as a non-root user</span><br><span class="line"></span><br><span class="line">The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The docker daemon always runs as the root user.</span><br><span class="line"></span><br><span class="line">If you don’t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. When the docker daemon starts, it makes the ownership of the Unix socket read/writable by the docker group.</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><p>  大概的意思就是：docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。</p><ul><li><p>解决方法1：</p><p>使用sudo获取管理员权限，运行docker命令</p></li><li><p>解决方法2：</p><p>docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker     #添加docker用户组</span><br><span class="line">sudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中</span><br><span class="line">newgrp docker     #更新用户组</span><br><span class="line">docker ps    #测试docker命令是否可以正常使用</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;执行docker命令遇到-Get-Permission-Denied&quot;&gt;&lt;a href=&quot;#执行docker命令遇到-Get-Permission-Denied&quot; class=&quot;headerlink&quot; title=&quot;执行docker命令遇到 Get Permission Denied&quot;&gt;&lt;/a&gt;执行docker命令遇到 &lt;strong&gt;Get Permission Denied&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装完docker后，执行docker相关命令，出现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.37/images/json: dial unix /var/run/docker.sock: connect: permission denied&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;p&gt;摘自dockermannual上的一段话&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Manage Docker as a non-root user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The docker daemon always runs as the root user.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If you don’t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. When the docker daemon starts, it makes the ownership of the Unix socket read/writable by the docker group.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Docker笔记" scheme="http://yoursite.com/categories/Docker%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令遇到的问题总结</title>
    <link href="http://yoursite.com/2018/11/13/Linux%E5%91%BD%E4%BB%A4%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/11/13/Linux命令遇到的问题总结/</id>
    <published>2018-11-13T06:16:17.000Z</published>
    <updated>2020-02-25T05:53:47.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-root用户和sudo使用root权限的区别："><a href="#1-root用户和sudo使用root权限的区别：" class="headerlink" title="1. root用户和sudo使用root权限的区别："></a>1. root用户和sudo使用root权限的区别：</h3><ul><li>功能：以root的身份执行命令</li><li>语法：sudo 其他指令</li><li>用户：被root加入<code>/etc/sudoers</code>文件中的用户</li><li>区别：普通用户使用sudo来执行只有root才能执行权限的命令，跟root用户执行是不一样的，因为这时候他用的还是<strong>普通用户的环境变量</strong></li></ul><h3 id="2-linux给用户添加sudo权限："><a href="#2-linux给用户添加sudo权限：" class="headerlink" title="2. linux给用户添加sudo权限："></a>2. linux给用户添加sudo权限：</h3><ul><li><p>linux下直接运行sudo命令，会提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxx is not in the sudoers file.  This incident will be reported.</span><br></pre></td></tr></table></figure><p>这里，xxxx是用户名称，这条信息表明无法执行sudo命令，解决如下：</p><ol><li>进入超级用户模式。也就是输入<code>su -</code> ，系统会让你输入超级用户密码，输入后就进入了超级用户模式。（当然你可以直接使用root登录）</li><li>编辑<code>/etc/sudoers</code>文件。也就是输入命令<code>vim /etc/sudoers</code>进入编辑模式，找到这一行：<code>root ALL=(ALL) ALL</code>在下面添加<code>xxx ALL=(ALL) ALL</code>（这里的xxx是你的用户名），然后保存退出即可。<a id="more"></a><h3 id="3-linux中drwxr-xr-x的意思和权限："><a href="#3-linux中drwxr-xr-x的意思和权限：" class="headerlink" title="3. linux中drwxr-xr-x的意思和权限："></a>3. linux中<code>drwxr-xr-x</code>的意思和权限：</h3></li></ol></li><li><p>读（read），写（write），执行（recute），简写（r，w，x），用数字表示（4，2，1）</p><p>| 权限项   |   读   |   写   |  执行  |   读   |   写   |  执行  |    读    |    写    |   执行   |<br>| :——- | :—-: | :—-: | :—-: | :—-: | :—-: | :—-: | :——: | :——: | :——: |<br>| 字符表示 |   r    |   w    |   x    |   r    |   w    |   x    |    r     |    w     |    x     |<br>| 数字表示 |   4    |   2    |   1    |   4    |   2    |   1    |    4     |    2     |    1     |<br>| 权限分配 | 所有者 | 所有者 | 所有者 | 所属组 | 所属组 | 所属组 | 其他用户 | 其他用户 | 其他用户 |</p></li><li><p>举例：</p><p>若某文件的权限为7（4+2+1），则代表可读（4）、可写（2）、可执行（1）。</p><p>若某文件的权限为6（4+2），则表示可读（4）、可写（2）。</p><p>若某文件的权限为5（4+1），则表示可读（4）、可执行（1）。</p><p>若某文件的权限为3（2+1），则表示可写（2）、可执行（1）。</p><p>若没有对文件的任何权限，用数字0表示。</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dazhan@iZuf6ic9ggky8lupefuf5xZ etc]$ ll adjtime</span><br><span class="line">-rw-r--r--.  1 root root       18 Aug 18  2017 adjtime</span><br></pre></td></tr></table></figure><p>  上述命令中，文件所有者为root，所属组root，文件名adjtime，文件权限为644。</p><p>  <code>-rw-r--r--</code> 第一位代表文件类型：-:普通文件，d:目录文件，l:链接文件，b:设备文件，c:字符设备文件，p:管道文件</p><ul><li><p>权限：</p><p>用户权限，就是你自己的权限。英文：user，简写：u</p><p>用户组权限，就是和你同组的人的权限。英文：group，简写：g</p><p>其他权限，就是不和你同组的人的权限。英文：others，简写：o</p><p>chmod 命令是用于改变文件或目录的访问权限。</p><p><code>+</code>表示增加权限，如u+x, u+r, u+w, g+w, g+r, o+r， a+r等</p><p><code>-</code>表示取消权限，如u-x, u-r, u-w, g-w, g-r, o-r， a-r等</p><p><code>=</code>表示赋予给定权限，并取消其他所有权限（如果有的话，如原来u是rwx，设置u=r，u就剩r）</p></li></ul><h3 id="4-修改主机名和是否显示完整的主机名"><a href="#4-修改主机名和是否显示完整的主机名" class="headerlink" title="4. 修改主机名和是否显示完整的主机名"></a>4. 修改主机名和是否显示完整的主机名</h3><ul><li><p>查看当前主机名：hostname</p></li><li><p>主机名保存在<code>/etc/hostname</code>文件里，所以只要编辑这个文件即可，将原来的主机名替换为自己想要的主机名。</p></li><li><p>更新<code>/etc/hosts</code>文件，因为主机名已经更改，如果不更新这个文件，有的程序不知道如何解析新的主机名，如sudo。将其中的<code>localhost.localdomain</code> 修改为新的主机名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br></pre></td></tr></table></figure></li><li><p>修改完成之后重启服务器：reboot</p></li><li><p>重启完成后，假设新的主机名是<code>example10.201.10.11</code>，发现没有显示完整的主机名，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[dazhan@example10 ~]$</span><br></pre></td></tr></table></figure><p>如要显示完整的主机名，解决方法如下：</p><p>找到<code>~/.bashrc</code>里面的<code>export PS1=&quot;[\u@\h \W]\$ &quot;</code>这一行，如果没有就添加，只需要将<code>h</code>改为<code>H</code>，然后保存文件，并使用<code>source ~/.bashrc</code>命令使之立即加载生效。</p><ul><li><p>特殊符号的意义：</p><p><code>\H</code>完整的主机名称。例如：我的机器名称为：<code>example10.201.10.11</code>，则这个名称就是<code>example10.201.10.11</code></p><p><code>\h</code>仅取主机的第一个名字，如上例，则为<code>example10</code>，<code>.201.10.11</code>则被省略</p><p><code>\w</code>完整的工作目录名称。家目录会以 <code>~</code>代替</p><p><code>\W</code>利用basename取得工作目录名称，所以只会列出最后一个目录</p><p><code>\u</code>当前用户的账号名称</p><p><code>\$</code>提示字符，如果是root时，提示符为：# ，普通用户则为：$</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-root用户和sudo使用root权限的区别：&quot;&gt;&lt;a href=&quot;#1-root用户和sudo使用root权限的区别：&quot; class=&quot;headerlink&quot; title=&quot;1. root用户和sudo使用root权限的区别：&quot;&gt;&lt;/a&gt;1. root用户和sudo使用root权限的区别：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;功能：以root的身份执行命令&lt;/li&gt;
&lt;li&gt;语法：sudo 其他指令&lt;/li&gt;
&lt;li&gt;用户：被root加入&lt;code&gt;/etc/sudoers&lt;/code&gt;文件中的用户&lt;/li&gt;
&lt;li&gt;区别：普通用户使用sudo来执行只有root才能执行权限的命令，跟root用户执行是不一样的，因为这时候他用的还是&lt;strong&gt;普通用户的环境变量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-linux给用户添加sudo权限：&quot;&gt;&lt;a href=&quot;#2-linux给用户添加sudo权限：&quot; class=&quot;headerlink&quot; title=&quot;2. linux给用户添加sudo权限：&quot;&gt;&lt;/a&gt;2. linux给用户添加sudo权限：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;linux下直接运行sudo命令，会提示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xxxx is not in the sudoers file.  This incident will be reported.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里，xxxx是用户名称，这条信息表明无法执行sudo命令，解决如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入超级用户模式。也就是输入&lt;code&gt;su -&lt;/code&gt; ，系统会让你输入超级用户密码，输入后就进入了超级用户模式。（当然你可以直接使用root登录）&lt;/li&gt;
&lt;li&gt;编辑&lt;code&gt;/etc/sudoers&lt;/code&gt;文件。也就是输入命令&lt;code&gt;vim /etc/sudoers&lt;/code&gt;进入编辑模式，找到这一行：&lt;code&gt;root ALL=(ALL) ALL&lt;/code&gt;在下面添加&lt;code&gt;xxx ALL=(ALL) ALL&lt;/code&gt;（这里的xxx是你的用户名），然后保存退出即可。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本中遇到的问题及解决方案</title>
    <link href="http://yoursite.com/2018/10/19/shell%E8%84%9A%E6%9C%AC%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/10/19/shell脚本中遇到的问题及解决方案/</id>
    <published>2018-10-19T04:01:18.000Z</published>
    <updated>2020-02-25T05:53:47.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. ||运算符"></a>1. <code>||</code>运算符</h3><ul><li><p>问题场景：shell脚本中定义了一个方法，方法里面有一个for循环，依次请求10个服务器并将结果保存到文件。试想，如果其中一个服务器的地址写错了，shell脚本执行到这里就会中断，不会继续往下执行了。</p></li><li><p>解决方案：</p><ul><li><p>第一种方法，就是使用if判断，这个在这里不细说。</p></li><li><p>第二种方法是使用<code>||</code>运算符。</p><ul><li><p>command1 <code>||</code> command2，如果command1未执行成功，那么就执行command2</p></li><li><p>这样，我们在循环中请求服务器的代码就可以写成如下形式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --max-time 120 --user $&#123;user&#125;:$&#123;pwd&#125; -s -k --request POST --header "Content-type: text/xml; charset=utf-8" --data @$&#123;requestFile&#125; $&#123;url&#125; | iconv -t utf8 | xmllint --format - &gt; $&#123;responseFile&#125; || true</span><br></pre></td></tr></table></figure><p>只需要保证<code>||</code> 右边的command2为真就可以了，当然你也可以写成<code>i=1</code> 这种为真的等式，但是不推荐这么做，因为这样在别人看代码的时候，会造成误解。</p><a id="more"></a><h3 id="2-关于getopts的使用方法"><a href="#2-关于getopts的使用方法" class="headerlink" title="2. 关于getopts的使用方法"></a>2. 关于getopts的使用方法</h3></li></ul></li></ul></li><li><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">while getopts ":e:s:pd:l" arg; </span><br><span class="line">do</span><br><span class="line">    case $arg in</span><br><span class="line">    e)</span><br><span class="line">        ghs_env=$OPTARG</span><br><span class="line">        ;;</span><br><span class="line">    s)</span><br><span class="line">        ghs_service=$OPTARG</span><br><span class="line">        ;;</span><br><span class="line">    p)</span><br><span class="line">        proxy=`sed '/^PROXY=/!d;s/.*=//' config.properties`</span><br><span class="line">        ;;</span><br><span class="line">    d)</span><br><span class="line">        dir_path=$OPTARG</span><br><span class="line">        ;;</span><br><span class="line">    l)</span><br><span class="line">        if [ -d "log" ]; then</span><br><span class="line">                rm -r log</span><br><span class="line">                mkdir log</span><br><span class="line">        else</span><br><span class="line">                mkdir log</span><br><span class="line">        fi</span><br><span class="line">        log_dir=$(cd `dirname $0`; pwd)/log</span><br><span class="line">        ;;</span><br><span class="line">    ?)</span><br><span class="line">        echo "Usage: $(basename $0) [-e somevalue] [-s somevalue] [-p somevalue] [-d somevalue]" 1&gt;&amp;2</span><br><span class="line">        exit 1</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>getopts有两个参数，第一个参数是一个字符串，包括字符和” <strong>:</strong> “, 每一个字符都是一个有效的选项，如果字符后面带有” <strong>:</strong> “, 表示这个字符有自己的参数。getopts从命令中获取这些参数，并且删去了” <strong>-</strong> “, 并将其赋值在第二个参数中，即”<strong>OPTARG</strong>“中，在例子中，<strong>$OPTARG</strong>存储相应选项的参数。</p></li><li><p><code>while getopts &quot;:e:s:pd:l&quot; arg;</code> 这行代码中，第一个冒号表示忽略系统报错信息，使用自定义的报错信息；字符后面的冒号表示该选项必须自己的参数。</p><ul><li><p>第一个冒号存在时（自定义报错信息）：</p><ol><li>当指定的参数不存在时，variable设置为” <strong>:</strong> “, 对应的<strong>$OPTARG</strong>为此时的选项  （这个尚未搞明白是什么意思）</li><li>当指定的选项是带参数的而没有提供参数或是非法选项（指定的选项没有定义），variable设置为” <strong>?</strong> “, 对应的<strong>$OPTARG</strong>为此时的选项</li></ol></li><li><p>第一个冒号不存在时（会按照系统的定义报错）：</p><ol><li>指定了非法选项（不存在的选项或者说是没有定义的选项），会报错：<code>scriptname:illegal option — 选项</code></li><li>选项需要参数但没有指定，会报错：<code>scriptname: option requires an argument –选项</code></li></ol><hr></li><li><p>单个字符后面接一个冒号，表示选项必须自己的参数，参数可以紧跟选项后或者以空格隔开，该参数的指针赋给<strong>OPTARG</strong>。</p></li><li><p>单个字符后面接两个冒号表示该选项必须自己的参数且参数紧跟选项后不能以空格隔开（我试过，感觉有没有空格都可以，因此，我觉得如果要加参数，字符后只要写一个冒号就可以了），该参数的指针赋给<strong>OPTARG</strong>。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-运算符&quot;&gt;&lt;a href=&quot;#1-运算符&quot; class=&quot;headerlink&quot; title=&quot;1. ||运算符&quot;&gt;&lt;/a&gt;1. &lt;code&gt;||&lt;/code&gt;运算符&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题场景：shell脚本中定义了一个方法，方法里面有一个for循环，依次请求10个服务器并将结果保存到文件。试想，如果其中一个服务器的地址写错了，shell脚本执行到这里就会中断，不会继续往下执行了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一种方法，就是使用if判断，这个在这里不细说。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种方法是使用&lt;code&gt;||&lt;/code&gt;运算符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;command1 &lt;code&gt;||&lt;/code&gt; command2，如果command1未执行成功，那么就执行command2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这样，我们在循环中请求服务器的代码就可以写成如下形式：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl --max-time 120 --user $&amp;#123;user&amp;#125;:$&amp;#123;pwd&amp;#125; -s -k --request POST --header &quot;Content-type: text/xml; charset=utf-8&quot; --data @$&amp;#123;requestFile&amp;#125; $&amp;#123;url&amp;#125; | iconv -t utf8 | xmllint --format - &amp;gt; $&amp;#123;responseFile&amp;#125; || true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只需要保证&lt;code&gt;||&lt;/code&gt; 右边的command2为真就可以了，当然你也可以写成&lt;code&gt;i=1&lt;/code&gt; 这种为真的等式，但是不推荐这么做，因为这样在别人看代码的时候，会造成误解。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据导出提示--secure-file-priv的问题</title>
    <link href="http://yoursite.com/2018/10/19/mysql%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E6%8F%90%E7%A4%BA--secure-file-priv%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/10/19/mysql数据导出提示--secure-file-priv的问题/</id>
    <published>2018-10-19T02:55:16.000Z</published>
    <updated>2020-02-25T05:53:47.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mysql数据导出提示–secure-file-priv的问题"><a href="#Mysql数据导出提示–secure-file-priv的问题" class="headerlink" title="Mysql数据导出提示–secure-file-priv的问题"></a>Mysql数据导出提示–secure-file-priv的问题</h3><ul><li><p>mysql可使用<code>into outfile</code>参数把表中的数据到处到csv，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user_id from weibo_comment into outfile &apos;/home/dazhan/comment.csv&apos; lines terminated by &apos;\n&apos;;</span><br></pre></td></tr></table></figure><p>执行后，weibo_comment表中的user_id字段就会被导出<code>/home/dazhan/comment.csv</code></p></li><li><p>参数说明：</p><ul><li><p><code>into outfile</code>导出的目录和文件名</p><p>指定导出的目录和文件名</p></li><li><p><code>fields terminated by</code>字段间分隔符</p><p>定义字段间的分隔符</p></li><li><p><code>optionally enclosed by</code>字段包围符</p><p>定义包围字段的字符（数值型字段无效）</p></li><li><p><code>lines terminated by</code>行间分隔符</p><p>定义每行的分隔符</p><a id="more"></a></li></ul></li><li><p>问题分析：</p><ul><li><p>以上实例在实际的运行中出现如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select user_id from weibo_comment into outfile &apos;/home/dazhan/comment.txt&apos; lines terminated by &apos;\n&apos;;</span><br><span class="line">ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span><br></pre></td></tr></table></figure></li><li><p>查看官方文档，<code>--secure-file-priv</code>参数用于LOAD DATA, SELECT …OUTFILE, LOAD_FILE()传到哪个指定目录。</p><ul><li><code>secure-file-priv</code>为<code>NULL</code>时，表示限制mysqld不允许导入或导出。</li><li><code>secure-file-priv</code>为<code>/var/lib/mysql-files/</code>时，表示限制mysqld只能在<code>/var/lib/mysql-files/</code>目录中执行导入导出，其他目录不行。</li><li><code>secure-file-priv</code>没有值时，表示不限制mysqld在任意目录的导入导出。</li></ul></li><li><p>查看<code>secure-file-priv</code>的值（默认值是NULL）的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like &apos;%secure_file_priv%&apos;;</span><br><span class="line">+------------------+-----------------------+</span><br><span class="line">| Variable_name    | Value                 |</span><br><span class="line">+------------------+-----------------------+</span><br><span class="line">| secure_file_priv | /var/lib/mysql-files/ |</span><br><span class="line">+------------------+-----------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>这是我的查询结果，所以，我只需要把上述的输出目录改为<code>/var/lib/mysql-files/</code>就可以进行数据导出。</p></li></ul></li><li><p>修改<code>secure-file-priv</code>参数值的方法：</p><ul><li><p>打开<code>my.cnf或my.ini</code>，加入如下语句后重启mysql服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secure_file_priv=&apos;&apos;</span><br></pre></td></tr></table></figure></li><li><p>查看修改后的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global variables like &apos;%secure_file_priv%&apos;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_file_priv |       |</span><br><span class="line">+------------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>这样修改后，就可以在任意目录进行数据导入导出了。</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mysql数据导出提示–secure-file-priv的问题&quot;&gt;&lt;a href=&quot;#Mysql数据导出提示–secure-file-priv的问题&quot; class=&quot;headerlink&quot; title=&quot;Mysql数据导出提示–secure-file-priv的问题&quot;&gt;&lt;/a&gt;Mysql数据导出提示–secure-file-priv的问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mysql可使用&lt;code&gt;into outfile&lt;/code&gt;参数把表中的数据到处到csv，示例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select user_id from weibo_comment into outfile &amp;apos;/home/dazhan/comment.csv&amp;apos; lines terminated by &amp;apos;\n&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行后，weibo_comment表中的user_id字段就会被导出&lt;code&gt;/home/dazhan/comment.csv&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;into outfile&lt;/code&gt;导出的目录和文件名&lt;/p&gt;
&lt;p&gt;指定导出的目录和文件名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fields terminated by&lt;/code&gt;字段间分隔符&lt;/p&gt;
&lt;p&gt;定义字段间的分隔符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;optionally enclosed by&lt;/code&gt;字段包围符&lt;/p&gt;
&lt;p&gt;定义包围字段的字符（数值型字段无效）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lines terminated by&lt;/code&gt;行间分隔符&lt;/p&gt;
&lt;p&gt;定义每行的分隔符&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Mysql笔记" scheme="http://yoursite.com/categories/Mysql%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>JDK开发环境配置</title>
    <link href="http://yoursite.com/2018/10/15/JDK%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/10/15/JDK开发环境配置/</id>
    <published>2018-10-15T06:57:02.000Z</published>
    <updated>2020-02-25T05:53:47.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JDK开发环境配置"><a href="#JDK开发环境配置" class="headerlink" title="JDK开发环境配置"></a>JDK开发环境配置</h3><h4 id="1-新建-gt-变量名“JAVA-HOME”-变量值“C-Program-Files-Java-jdk1-8-0-112”（即JDK的安装路径）"><a href="#1-新建-gt-变量名“JAVA-HOME”-变量值“C-Program-Files-Java-jdk1-8-0-112”（即JDK的安装路径）" class="headerlink" title="1. 新建 -&gt; 变量名“JAVA_HOME”, 变量值“C:\Program Files\Java\jdk1.8.0_112”（即JDK的安装路径）"></a>1. 新建 -&gt; 变量名“<strong>JAVA_HOME</strong>”, 变量值“<strong>C:\Program Files\Java\jdk1.8.0_112</strong>”（即JDK的安装路径）</h4><h4 id="2-编辑-gt-变量名“Path”-在原变量值的最后加上“-JAVA-HOME-bin-JAVA-HOME-jre-bin”"><a href="#2-编辑-gt-变量名“Path”-在原变量值的最后加上“-JAVA-HOME-bin-JAVA-HOME-jre-bin”" class="headerlink" title="2. 编辑 -&gt; 变量名“Path”, 在原变量值的最后加上“;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin”"></a>2. 编辑 -&gt; 变量名“<strong>Path</strong>”, 在原变量值的最后加上“<strong>;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</strong>”</h4><h4 id="3-新建-gt-变量名“CLASSPATH”-变量值“-JAVA-HOME-lib-JAVA-HOME-lib-dt-jar-JAVA-HOME-lib-tools-jar”"><a href="#3-新建-gt-变量名“CLASSPATH”-变量值“-JAVA-HOME-lib-JAVA-HOME-lib-dt-jar-JAVA-HOME-lib-tools-jar”" class="headerlink" title="3. 新建 -&gt; 变量名“CLASSPATH”, 变量值“.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar”"></a>3. 新建 -&gt; 变量名“<strong>CLASSPATH</strong>”, 变量值“<strong>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</strong>”</h4><h4 id="4-测试："><a href="#4-测试：" class="headerlink" title="4. 测试："></a>4. 测试：</h4><ul><li>在CMD中分别输入<code>java,javac,java -version</code>命令，出现JDK的编译信息，包括修改命令的语法和参数选项的信息，即环境配置成功。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JDK开发环境配置&quot;&gt;&lt;a href=&quot;#JDK开发环境配置&quot; class=&quot;headerlink&quot; title=&quot;JDK开发环境配置&quot;&gt;&lt;/a&gt;JDK开发环境配置&lt;/h3&gt;&lt;h4 id=&quot;1-新建-gt-变量名“JAVA-HOME”-变量值“C-Program-
      
    
    </summary>
    
      <category term="Java笔记" scheme="http://yoursite.com/categories/Java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="jdk" scheme="http://yoursite.com/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Python3 指定文件夹下所有文件（包括子目录下的文件）拷贝到目标文件夹下</title>
    <link href="http://yoursite.com/2018/09/17/%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/09/17/脚本/</id>
    <published>2018-09-17T08:36:12.000Z</published>
    <updated>2020-02-25T05:53:47.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Python3-指定文件夹下所有文件（包括子目录下的文件）拷贝到目标文件夹下"><a href="#1-Python3-指定文件夹下所有文件（包括子目录下的文件）拷贝到目标文件夹下" class="headerlink" title="1. Python3 指定文件夹下所有文件（包括子目录下的文件）拷贝到目标文件夹下"></a>1. Python3 指定文件夹下所有文件（包括子目录下的文件）拷贝到目标文件夹下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"><span class="comment"># @TIME  :2018/9/17 9:02</span></span><br><span class="line"><span class="comment"># @Author:dazhan</span></span><br><span class="line"><span class="comment"># @File  :copyfiles2dir.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">source_path = os.path.abspath(<span class="string">r'Z:\webscraping\output\dazhan_group_WS1810222337649'</span>)</span><br><span class="line">target_path = os.path.abspath(<span class="string">r'D:\Weekly_Refresh\needToCheck'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_path):</span><br><span class="line">    os.makedirs(target_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.exists(source_path):</span><br><span class="line">    <span class="comment"># root 所指的是当前正在遍历的这个文件夹的本身的地址</span></span><br><span class="line">    <span class="comment"># dirs 是一个 list，内容是该文件夹中所有的目录的名字(不包括子目录)</span></span><br><span class="line">    <span class="comment"># files 同样是 list, 内容是该文件夹中所有的文件(不包括子目录)</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(source_path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            src_file = os.path.join(root, file)</span><br><span class="line">            shutil.copy(src_file, target_path)</span><br><span class="line">            print(src_file)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'copy files finished!'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Python3-指定文件夹下所有文件（包括子目录下的文件）拷贝到目标文件夹下&quot;&gt;&lt;a href=&quot;#1-Python3-指定文件夹下所有文件（包括子目录下的文件）拷贝到目标文件夹下&quot; class=&quot;headerlink&quot; title=&quot;1. Python3 指
      
    
    </summary>
    
      <category term="Python3笔记" scheme="http://yoursite.com/categories/Python3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy+Scrapy-redis+Scrapyd+Gerapy分布式爬虫框架整合</title>
    <link href="http://yoursite.com/2018/09/07/Scrapy-Scrapy-redis-Scrapyd-Gerapy%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
    <id>http://yoursite.com/2018/09/07/Scrapy-Scrapy-redis-Scrapyd-Gerapy分布式爬虫框架整合/</id>
    <published>2018-09-07T09:44:35.000Z</published>
    <updated>2020-02-25T05:53:47.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>首先，介绍一下这个标题吧。</p><ul><li>Scrapy：是一个基于Twisted的异步IO框架，有了这个框架，我们就不需要等待当前URL抓取完毕之后在进行下一个URL的抓取，抓取效率可以提高很多。</li><li>Scrapy-redis：虽然Scrapy框架是异步加多线程的，由于我们只能在一台主机上运行，爬取效率还是有限的，Scrapy-redis库为我们提供了Scrapy分布式的队列，调度器，去重等等功能，有了它，我们就可以将多台主机组合起来，共同完成一个爬取任务，抓取的效率又提高了。</li><li>Scrapyd：分布式爬虫完成之后，接下来就是代码部署，如果我们有很多主机，那就要逐个登录服务器进行部署，万一代码有所改动……….可以想象，这个过程是多么繁琐。Scrapyd是专门用来进行分布式部署的工具，它提供HTTP接口来帮助我们部署，启动，停止，删除爬虫程序，利用它我们可以很方便的完成Scrapy爬虫项目的部署。</li><li><p>Gerapy：是一个基于Scrapyd，Scrapyd API，Django，Vue.js搭建的分布式爬虫管理框架。简单点说，就是用上述的Scrapyd工具是在命令行进行操作，而Gerapy将命令行和图形界面进行了对接，我们只需要点击按钮就可完成部署，启动，停止，删除的操作。</p><a id="more"></a><h3 id="创建Scrapy项目（参考Scrapy框架入门）"><a href="#创建Scrapy项目（参考Scrapy框架入门）" class="headerlink" title="创建Scrapy项目（参考Scrapy框架入门）"></a>创建Scrapy项目（参考Scrapy框架入门）</h3></li><li><p>项目结构如下（这个项目里包含了多个spider，接下来，就以我圈出来的为例讲解）</p><p><img src="/2018/09/07/Scrapy-Scrapy-redis-Scrapyd-Gerapy分布式爬虫框架整合/ss1.png" alt=""></p><p>因为我这个需要用到固定的代理，在这个讲一下代理如何使用：</p><p>代理在middlewares.py这个模块中的process_request方法中进行配置（如果想知道为什么在这里配置，可以去google一下scrapy框架爬虫的整体结构流程），如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, proxy_url)</span>:</span></span><br><span class="line">        self.proxy_url = proxy_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        request.meta[<span class="string">'proxy'</span>] = self.proxy_url</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(</span><br><span class="line">            proxy_url=crawler.settings.get(<span class="string">'PROXY_URL'</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>然后在settings.py中指定具体的代理是什么,如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROXY_URL = <span class="string">'http://10.51.1.140:8080'</span></span><br></pre></td></tr></table></figure><p>如果要设置动态代理，参考这里：<a href="https://github.com/Damon-zln/ProxyPool" target="_blank" rel="noopener">https://github.com/Damon-zln/ProxyPool</a></p></li></ul><h3 id="Scrapy-redis分布式配置"><a href="#Scrapy-redis分布式配置" class="headerlink" title="Scrapy-redis分布式配置"></a>Scrapy-redis分布式配置</h3><ol><li><p>首先，确认Scrapy-redis库已经安装，如果未安装，可以 <strong>pip install scrapy-redis</strong> 进行安装。</p></li><li><p>搭建Redis服务器，如果未安装redis数据库的，请自行google。</p><p>Redis安装完成后，就可以远程连接了，如果不能，可能是服务器上没有开放端口（redis默认端口6379）</p><p>记录服务器的IP，端口（默认是6379），密码为foobared（安装的时候自己设置的密码），供后面分布式爬虫使用。</p></li><li><p>配置Scrapy-redis（只需要修改settings.py文件即可）</p><p>将调度器的类和去重的类替换为Scrapy-redis提供的类，在settings.py中配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SCHEDULER = <span class="string">'scrapy_redis.scheduler.Scheduler'</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_redis.dupefilter.RFPDupeFilter'</span></span><br></pre></td></tr></table></figure><p>Redis连接配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REDIS_URL = <span class="string">'redis://:foobared@10.255.1.175:6379'</span></span><br></pre></td></tr></table></figure><p>其他的都使用默认配置（如：调度对列，持久化，重爬，管道）</p></li><li><p>配置存储目标：</p><p>搭建一个MongoDB服务，将多台主机的数据都存在同一个MongoDB数据库中</p><p>配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MONGO_URI = <span class="string">'10.255.1.175'</span></span><br><span class="line">MONGO_DB = <span class="string">'webscrape'</span></span><br></pre></td></tr></table></figure><p>综上，分布式完整配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MONGO_URI = <span class="string">'10.255.1.175'</span></span><br><span class="line">MONGO_DB = <span class="string">'webscrape'</span></span><br><span class="line">PROXY_URL = <span class="string">'http://10.51.1.140:8080'</span></span><br><span class="line">SCHEDULER = <span class="string">'scrapy_redis.scheduler.Scheduler'</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_redis.dupefilter.RFPDupeFilter'</span></span><br><span class="line">REDIS_URL = <span class="string">'redis://:foobared@10.255.1.175:6379'</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Scrapyd安装"><a href="#Scrapyd安装" class="headerlink" title="Scrapyd安装"></a>Scrapyd安装</h3><ol><li><p>安装：<code>pip install scrapyd</code></p></li><li><p>配置：安装完毕后，需要新建一个配置文件/etc/scrapyd/scrapyd.conf，scrapyd在运行时会读取此配置文件</p><p>在Scrapyd1.2版本后，不会自动创建该文件，需要我们自行添加。</p><p>首先，执行如下命令新建文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/scrapyd</span><br><span class="line">sudo vi /etc/scrapyd/scrapyd.conf</span><br></pre></td></tr></table></figure><p>然后在文件中写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[scrapyd]</span><br><span class="line">eggs_dir    = eggs</span><br><span class="line">logs_dir    = logs</span><br><span class="line">items_dir   =</span><br><span class="line">jobs_to_keep = 5</span><br><span class="line">dbs_dir     = dbs</span><br><span class="line">max_proc    = 0</span><br><span class="line">max_proc_per_cpu = 4</span><br><span class="line">finished_to_keep = 100</span><br><span class="line">poll_interval = 5.0</span><br><span class="line">bind_address = 127.0.0.1</span><br><span class="line">http_port   = 6800</span><br><span class="line">debug       = off</span><br><span class="line">runner      = scrapyd.runner</span><br><span class="line">application = scrapyd.app.application</span><br><span class="line">launcher    = scrapyd.launcher.Launcher</span><br><span class="line">webroot     = scrapyd.website.Root</span><br><span class="line"></span><br><span class="line">[services]</span><br><span class="line">schedule.json     = scrapyd.webservice.Schedule</span><br><span class="line">cancel.json       = scrapyd.webservice.Cancel</span><br><span class="line">addversion.json   = scrapyd.webservice.AddVersion</span><br><span class="line">listprojects.json = scrapyd.webservice.ListProjects</span><br><span class="line">listversions.json = scrapyd.webservice.ListVersions</span><br><span class="line">listspiders.json  = scrapyd.webservice.ListSpiders</span><br><span class="line">delproject.json   = scrapyd.webservice.DeleteProject</span><br><span class="line">delversion.json   = scrapyd.webservice.DeleteVersion</span><br><span class="line">listjobs.json     = scrapyd.webservice.ListJobs</span><br><span class="line">daemonstatus.json = scrapyd.webservice.DaemonStatus</span><br></pre></td></tr></table></figure><p>该内容参见官方文档：<a href="https://scrapyd.readthedocs.io/en/stable/config.html#example-configuration-file" target="_blank" rel="noopener">https://scrapyd.readthedocs.io/en/stable/config.html#example-configuration-file</a></p><p>这里的配置文件有所修改：max_proc_per_cpu官方默认是4，即一台主机每个CPU最多运行4个Scrapy任务，在此提高为10，另外，bind_address，默认为本地127.0.0.1，在此修改为0.0.0.0,这样外网可以访问。</p></li><li><p>后台运行scrapyd</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapyd &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure><p>运行之后，便可在浏览器的6800端口访问WEB UI了，如下：</p><p><img src="/2018/09/07/Scrapy-Scrapy-redis-Scrapyd-Gerapy分布式爬虫框架整合/ss2.png" alt=""></p></li></ol><h3 id="Gerapy分布式管理"><a href="#Gerapy分布式管理" class="headerlink" title="Gerapy分布式管理"></a>Gerapy分布式管理</h3><ol><li><p>安装：<code>pip install gerapy</code></p></li><li><p>使用说明：</p><p>利用gerapy命令创建一个项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerapy init</span><br></pre></td></tr></table></figure><p>在当前目录下生成一个gerapy文件夹，进入gerapy文件夹，会发现一个空的projects文件夹，后面后用到.</p><p>初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerapy migrate</span><br></pre></td></tr></table></figure><p>这样会生成一个SQLite数据库，用于保存各个主机的配置信息等.</p><p>启动Gerapy服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gerapy runserver host:port (默认端口是8000)</span><br></pre></td></tr></table></figure><p>这样，我们就可以通过<em><a href="http://host:8000" target="_blank" rel="noopener">http://host:8000</a></em>进入Gerapy管理页面</p></li><li><p>在主机管理中添加安装了Scrapyd环境的机器（机器IP和Scrapyd运行的端口，默认是6800），如下图：</p><p><img src="/2018/09/07/Scrapy-Scrapy-redis-Scrapyd-Gerapy分布式爬虫框架整合/ss3.png" alt=""></p></li><li><p>上面创建gerapy项目的时候，会生成一个projects文件夹，这个文件夹就是用来存放你的Scrapy项目的（直接将整个项目拷贝到这个文件夹下即可）</p><p><img src="/2018/09/07/Scrapy-Scrapy-redis-Scrapyd-Gerapy分布式爬虫框架整合/ss4.png" alt=""></p></li><li><p>可以点击上图中的编辑，在线编辑项目，如果项目没有问题，可以点击部署进行打包和部署，在部署之前要打包项目（打包成一个egg文件），可以部署到多台主机，如下所示：</p><p><img src="/2018/09/07/Scrapy-Scrapy-redis-Scrapyd-Gerapy分布式爬虫框架整合/ss5.png" alt=""></p></li><li><p>部署完毕后，可以回到主机管理页面进行任务调度。点击调度即可进入任务管理页面，可以查看当前主机所有任务的运行状态。</p><p><img src="/2018/09/07/Scrapy-Scrapy-redis-Scrapyd-Gerapy分布式爬虫框架整合/ss6.png" alt=""></p><p>通过点击运行，停止按钮来实现任务的启动和停止，同时可以展开任务条目查看日志详情。</p></li><li><p>下面是抓取的数据存入MongoDB数据库。</p><p><img src="/2018/09/07/Scrapy-Scrapy-redis-Scrapyd-Gerapy分布式爬虫框架整合/ss7.png" alt=""></p></li></ol><h3 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h3><p>在讲docker部署之前，先简单总结一下上面我们做了什么事吧。</p><ul><li>创建Scrapy项目：里面存放的就是抓取数据的一些逻辑</li><li>Scrapy-redis分布式配置：这是是在Scrapy项目中的settings.py文件中配置的，作用就是让Scrapy支持分布式</li><li>Scrapyd安装：分布式抓取时，分布节点（node机器）所需要的环境</li><li>Gerapy分布式管理：这个就是类似于我们webscraping的管理平台</li></ul><p>我们这里的docker部署，是指将我们的分布节点的scrapyd环境，使用docker来安装，具体如下：</p><ol><li>首先在每台节点上安装docker（最新的稳定的版本）</li><li>执行docker命令完成环境安装：<code>docker run --name scrapyd -p 6800:6800 -d damon7096/scrapyd:latest</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;首先，介绍一下这个标题吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scrapy：是一个基于Twisted的异步IO框架，有了这个框架，我们就不需要等待当前URL抓取完毕之后在进行下一个URL的抓取，抓取效率可以提高很多。&lt;/li&gt;
&lt;li&gt;Scrapy-redis：虽然Scrapy框架是异步加多线程的，由于我们只能在一台主机上运行，爬取效率还是有限的，Scrapy-redis库为我们提供了Scrapy分布式的队列，调度器，去重等等功能，有了它，我们就可以将多台主机组合起来，共同完成一个爬取任务，抓取的效率又提高了。&lt;/li&gt;
&lt;li&gt;Scrapyd：分布式爬虫完成之后，接下来就是代码部署，如果我们有很多主机，那就要逐个登录服务器进行部署，万一代码有所改动……….可以想象，这个过程是多么繁琐。Scrapyd是专门用来进行分布式部署的工具，它提供HTTP接口来帮助我们部署，启动，停止，删除爬虫程序，利用它我们可以很方便的完成Scrapy爬虫项目的部署。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gerapy：是一个基于Scrapyd，Scrapyd API，Django，Vue.js搭建的分布式爬虫管理框架。简单点说，就是用上述的Scrapyd工具是在命令行进行操作，而Gerapy将命令行和图形界面进行了对接，我们只需要点击按钮就可完成部署，启动，停止，删除的操作。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="scrapy" scheme="http://yoursite.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy框架入门</title>
    <link href="http://yoursite.com/2018/07/18/Scrapy%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/07/18/Scrapy框架入门/</id>
    <published>2018-07-18T09:44:35.000Z</published>
    <updated>2020-02-25T05:53:47.752Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>安装Scrapy框架、MongoDB和PyMongo库，如果没有安装，google了解一下~~</p><h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h3><p>使用命令创建Scrapy项目，命令如下：</p><p><code>scrapy startproject tutorial</code></p><p>该命令可以在任意文件夹运行，如果提示权限问题，可以加<strong>sudo</strong>运行。该命令会创建一个名为tutorial的文件夹，结构如下：</p><p><img src="/2018/07/18/Scrapy框架入门/s1.png" alt=""></p><ul><li>scrapy.cfg： Scrapy项目的配置文件，定义了项目的配置文件路径，部署相关信息等</li><li>item.py： 定义item数据结构（爬取的数据结构）</li><li>pipeline.py： 定义数据管道</li><li>settings.py： 配置文件<br>e middlewares.py： 定义爬取时的中间件</li><li>spiders： 放置Spiders的文件夹<a id="more"></a><h3 id="3-创建Spider"><a href="#3-创建Spider" class="headerlink" title="3. 创建Spider"></a>3. 创建Spider</h3></li></ul><p>Spider是自己定义的类，Scrapy用它来从网页抓取内容，并解析抓取结果。该类必须继承Scrapy提供的Spider类scrapy.Spider。</p><p>使用命令创建一个Spider，命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd tutorial</span><br><span class="line">scrapy genspider quotes quotes.toscrape.com</span><br></pre></td></tr></table></figure><p>首先，进入刚才创建的tutorial文件夹，然后执行<strong>genspider</strong>命令。第一个参数是spider的名称，第二个参数是网络域名（要抓取网络的域名）。执行完毕后，spiders文件夹中多了一个quotes.py，它就是刚刚创建的Spider，内容如下：</p><p><img src="/2018/07/18/Scrapy框架入门/s2.png" alt=""></p><p>该类中有三个属性 —— name、allowed_domains、start_urls，一个方法parse。</p><ul><li>name，唯一的名字，用来区分不同的Spider。</li><li>allowed_domains，允许爬取的域名，如果初始或后续的请求链接不是该域名下的，则被过滤掉。</li><li>start_urls，Spider在启动时爬取的url列表，用来定义初始的请求。</li><li>parse，它是spider的一个方法，用来处理start_urls里面的请求返回的响应，该方法负责解析返回的响应，提取数据或进一步生成处理的请求。</li></ul><h3 id="4-创建Item"><a href="#4-创建Item" class="headerlink" title="4. 创建Item"></a>4. 创建Item</h3><p>Item是保存爬取数据的容器，使用方法和字典类似。创建Item需要继承scrapy.Item类，并且定义类型为scrapy.Field的字段。</p><p>定义Item，将生成的items.py修改如下：</p><p><img src="/2018/07/18/Scrapy框架入门/s3.png" alt=""></p><p>这里定义了三个字段，接下来爬取时我们会用到这个Item。</p><h3 id="5-解析Response"><a href="#5-解析Response" class="headerlink" title="5. 解析Response"></a>5. 解析Response</h3><p>前面我们看到，parse()方法的参数response是start_urls里面的链接爬取后的结果，所以在parse方法中，可以对response变量包含的内容进行解析。网页结构如下：</p><p><img src="/2018/07/18/Scrapy框架入门/s4.png" alt=""></p><p>提取方式可以是CSS选择器或XPath选择器。在这里，使用CSS选择器，parse()方法修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    quotes = response.css(<span class="string">'.quote'</span>)</span><br><span class="line">    <span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">        text = quote.css(<span class="string">'.text::text'</span>).extract_first()</span><br><span class="line">        author = quote.css(<span class="string">'.author::text'</span>).extract_first()</span><br><span class="line">        tag = quote.css(<span class="string">'.tags .tag::text'</span>).extract()</span><br></pre></td></tr></table></figure><p>首先，利用选择器选取所有的quote，并将其赋值给quotes变量，然后利用for循环对每一个quote遍历，解析每一个quote的内容。</p><p>对text来说，他的class是text，所以用<strong>.text</strong>选择器来选取，这个结果实际上是整个带有标签的节点，要获取它的正文内容，可以加<strong>::text</strong>来获取。这时的结果是长度为1的列表，所以还需要用<strong>extract_first()</strong>方法来获取第一个元素。</p><h3 id="6-使用Item"><a href="#6-使用Item" class="headerlink" title="6. 使用Item"></a>6. 使用Item</h3><p>上面定义了Item，这边我们就需要用到它。Item可以理解为一个字典，不过在这里需要先实例化，然后将解析的结果赋值给Item的每一个字段，最后返回Item。</p><p>修改QuotesSpider类如下：</p><p><img src="/2018/07/18/Scrapy框架入门/s5.png" alt=""></p><p>至此，首页的所有内容被解析出来了，并将结果赋值给一个个TutorialItem。</p><h3 id="7-后续Request"><a href="#7-后续Request" class="headerlink" title="7. 后续Request"></a>7. 后续Request</h3><p>上面实现了网页首页的抓取解析，那么下一页怎么抓取呢？我们可以看到网页的翻页结构如下：</p><p><img src="/2018/07/18/Scrapy框架入门/s6.png" alt=""></p><p><img src="/2018/07/18/Scrapy框架入门/s7.png" alt=""></p><p>这里有一个Next按钮，查看源码，可以看出下一页的全链接是：<a href="http://quotes.toscrape.com/page/2/,通过这个链接我们就可以构造下一个请求。" target="_blank" rel="noopener">http://quotes.toscrape.com/page/2/,通过这个链接我们就可以构造下一个请求。</a></p><p>构造请求需要用到<strong>scrapy.Request</strong>。这里会有两个参数 ——-url和callback。</p><ul><li>url，请求链接。</li><li>callback，回调函数。请求完毕后，获取响应，引擎会将该响应作为参数传递给回调函数，回调函数进行解析或生成下一个请求。</li></ul><p>在parse()方法中追加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">next_page = response.css(<span class="string">'.pager .next a::attr("href")'</span>).extract_first()</span><br><span class="line">url = response.urljoin(next_page)</span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br></pre></td></tr></table></figure><p>第一句，获取下一个页面的链接，即要获取a超链接中的href属性。</p><p>第二句，调用<strong>urljoin()</strong>方法，urljoin()方法可以将相对URL构造成一个绝对URL。例如，获取得到下一页的地址是/page/2/，urljoin()方法处理后的结果是：<a href="http://quotes.toscrape.com/page/2/。" target="_blank" rel="noopener">http://quotes.toscrape.com/page/2/。</a></p><p>第三句，通过url和callback变量构造了一个新的请求，回调函数callback依然使用parse()方法。这样，爬虫就进入了一个循环，直到最后一页。</p><p>修改之后，整个Spider类如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> tutorial.items <span class="keyword">import</span> TutorialItem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'quotes'</span></span><br><span class="line">    allowed_domains = [<span class="string">'quotes.toscrape.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        quotes = response.css(<span class="string">'.quote'</span>)</span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">            item = TutorialItem()</span><br><span class="line">            item[<span class="string">'text'</span>] = quote.css(<span class="string">'.text::text'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'author'</span>] = quote.css(<span class="string">'.author::text'</span>).extract_first()</span><br><span class="line">            item[<span class="string">'tag'</span>] = quote.css(<span class="string">'.tags .tag::text'</span>).extract()</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line">        next_page = response.css(<span class="string">'.pager .next a::attr("href")'</span>).extract_first()</span><br><span class="line">        url = response.urljoin(next_page)</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br></pre></td></tr></table></figure><h3 id="8-运行"><a href="#8-运行" class="headerlink" title="8. 运行"></a>8. 运行</h3><p>进入目录，运行如下命令：</p><p><code>scrapy crawl quotes</code></p><p>就可以看到Scrapy的运行结果了。</p><h3 id="9-保存文件"><a href="#9-保存文件" class="headerlink" title="9. 保存文件"></a>9. 保存文件</h3><p>运行完Scrapy后，我们只在控制台看到了输出结果。如何保存结果呢？</p><p>Scrapy提供了Feed Exports可以轻松将结果输出。例如，我们想将上面的结果保存成JSON文件，可以执行如下命令：</p><p><code>scrapy crawl quotes -o quotes.json</code></p><p>命令运行后，会发现项目内多了一个quotes.json文件，这个文件包含了抓取的所有内容，格式为JSON。</p><p>另外，还支持其他格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl quotes -o quotes.jsonlines   (scrapy crawl quotes -o quotes.jl ,  jl是jsonlines的缩写)</span><br><span class="line">scrapy crawl quotes -o quotes.csv</span><br><span class="line">scrapy crawl quotes -o quotes.xml</span><br><span class="line">scrapy crawl quotes -o quotes.pickle</span><br><span class="line">scrapy crawl quotes -o quotes.marshal</span><br><span class="line">scrapy crawl quotes -o ftp://user:<span class="keyword">pass</span>@ftp.example.com/path/to/quotes.csv    (远程输出，需要正确配置，否则会报错)</span><br></pre></td></tr></table></figure><h3 id="10-使用Pipeline"><a href="#10-使用Pipeline" class="headerlink" title="10. 使用Pipeline"></a>10. 使用Pipeline</h3><p>如果想进行复杂额操作，如将结果保存到MongoDB数据库，或者筛选Item，我们可以定义Pipeline来实现。</p><p>前面提到，Pipeline是项目管道，当Item生成后，它会自动被送到Pipeline进行处理，主要的操作如下：</p><ul><li>清理HTML数据</li><li>验证爬取的数据，检查爬取的字段</li><li>查重并丢弃重复内容</li><li>将结果保存到数据库</li></ul><p>实现Pipeline，只需要定义一个类并实现process_item()方法即可。启用Pipeline后，Pipline会自动调用这个方法。process_item()方法必须返回包含数据的字典或item对象，或者抛出DropItem异常。</p><p>process_item()方法有两个参数，一个参数是item，每次Spider生成的Item都会作为参数传递过来，另一个参数是spider，就是Spider的实例。</p><p>接下来，我们实现一个Pipline，筛掉text长度大于50的Item，并将结果保存到MongoDB数据库。</p><p>修改pipelines.py如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TutorialPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.limit = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">'text'</span>]:</span><br><span class="line">            <span class="keyword">if</span> len(item[<span class="string">'text'</span>]) &gt; self.limit:</span><br><span class="line">                item[<span class="string">'text'</span>] = item[<span class="string">'text'</span>][<span class="number">0</span>:self.limit].rstrip() + <span class="string">'...'</span></span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> DropItem(<span class="string">'Missing text'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></span><br><span class="line">        self.mongo_uri = mongo_uri</span><br><span class="line">        self.mongo_db = mongo_db</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(</span><br><span class="line">            mongo_uri=crawler.settings.get(<span class="string">'MONGO_URI'</span>),</span><br><span class="line">            mongo_db=crawler.settings.get(<span class="string">'MONGO_DB'</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client = pymongo.MongoClient(self.mongo_uri)</span><br><span class="line">        self.db = self.client[self.mongo_db]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        name = item.__class__.__name__</span><br><span class="line">        self.db[name].insert(dict(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client.close()</span><br></pre></td></tr></table></figure><ul><li>from_crawler，这是一个类方法，用@classmethod标识，是一种依赖注入。它的参数就是crawler，通过crawler可以拿到全局配置的每一个配置信息。在全局配置settings.py中，可以配置MONGO_UR和MONGO_DB来指定MongoDB连接需要的地址和数据库名称，拿到配置信息之后返回类对象即可。所以这个方法主要是用来获取settings.py中的配置信息。</li><li>open_spider，当Spider开启时，这个方法被调用。进行初始化操作。</li><li>close_spider，当Spider关闭时，这个方法被调用。将数据库连接关闭。</li></ul><p>最主要的process_item()方法则进行了数据插入操作。</p><p>定义好的TutorialPipeline和MongoPipline这两个类后，我们需要在settings.py中使用它们，MongoDB的连接信息也需要在settings.py中定义。</p><p>settings.py中加入如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'tutorial.pipelines.TutorialPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">'tutorial.pipelines.MongoPipeline'</span>: <span class="number">400</span>,</span><br><span class="line">&#125;</span><br><span class="line">MONGO_URI = <span class="string">'localhost'</span></span><br><span class="line">MONGO_DB = <span class="string">'tutorial'</span></span><br></pre></td></tr></table></figure><p>赋值ITEM_PIPELINES字典，键名是Pipeline的类名称，键值是调用的优先级，是一个数字，数字越小对应的Pipeline越先被调用。</p><p>重新执行如下命令进行爬取：</p><p><code>scrapy crawl quotes</code></p><p>结束后，MongoDB中会创建了一个tutorial的数据库、TutorialItem的表，如下图：</p><p><img src="/2018/07/18/Scrapy框架入门/s8.png" alt=""></p><h3 id="11-结语"><a href="#11-结语" class="headerlink" title="11. 结语"></a>11. 结语</h3><p>至此，一个简单的Scrapy框架爬虫就完成了，这只是一个简单的爬虫例子，Github上面也有许多相关的项目可以去研究~~~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1. 准备工作&quot;&gt;&lt;/a&gt;1. 准备工作&lt;/h3&gt;&lt;p&gt;安装Scrapy框架、MongoDB和PyMongo库，如果没有安装，google了解一下~~&lt;/p&gt;
&lt;h3 id=&quot;2-创建项目&quot;&gt;&lt;a href=&quot;#2-创建项目&quot; class=&quot;headerlink&quot; title=&quot;2. 创建项目&quot;&gt;&lt;/a&gt;2. 创建项目&lt;/h3&gt;&lt;p&gt;使用命令创建Scrapy项目，命令如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scrapy startproject tutorial&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该命令可以在任意文件夹运行，如果提示权限问题，可以加&lt;strong&gt;sudo&lt;/strong&gt;运行。该命令会创建一个名为tutorial的文件夹，结构如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/07/18/Scrapy框架入门/s1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scrapy.cfg： Scrapy项目的配置文件，定义了项目的配置文件路径，部署相关信息等&lt;/li&gt;
&lt;li&gt;item.py： 定义item数据结构（爬取的数据结构）&lt;/li&gt;
&lt;li&gt;pipeline.py： 定义数据管道&lt;/li&gt;
&lt;li&gt;settings.py： 配置文件&lt;br&gt;e middlewares.py： 定义爬取时的中间件&lt;/li&gt;
&lt;li&gt;spiders： 放置Spiders的文件夹&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="scrapy" scheme="http://yoursite.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>python3 使用pip安装（命令行中）失败或 “not a supported wheel” 解决方案！</title>
    <link href="http://yoursite.com/2018/07/17/python3-%E4%BD%BF%E7%94%A8pip%E5%AE%89%E8%A3%85%EF%BC%88%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%EF%BC%89%E5%A4%B1%E8%B4%A5%E6%88%96-%E2%80%9Cnot-a-supported-wheel%E2%80%9D-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%81/"/>
    <id>http://yoursite.com/2018/07/17/python3-使用pip安装（命令行中）失败或-“not-a-supported-wheel”-解决方案！/</id>
    <published>2018-07-17T10:04:18.000Z</published>
    <updated>2020-02-25T05:53:47.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python3-使用pip安装（命令行中）失败或-“not-a-supported-wheel”-解决方案！"><a href="#python3-使用pip安装（命令行中）失败或-“not-a-supported-wheel”-解决方案！" class="headerlink" title="python3 使用pip安装（命令行中）失败或 “not a supported wheel” 解决方案！"></a>python3 使用pip安装（命令行中）失败或 “not a supported wheel” 解决方案！</h3><ul><li><p>原因1：安装的不是对应python版本的库，下载的库名中cp36代表python3.6,其它同理。</p></li><li><p>原因2：（我遇到的情况—-下载的是对应版本的库，然后仍然提示不支持当前平台）</p><p>百度了一下，说法如下：</p><p>在shell中输入import pip; print(pip.pep425tags.get_supported())可以获取到pip支持的文件名还有版本</p><p>然而，很悲催。。。。出现了</p><p><img src="/2018/07/17/python3-使用pip安装（命令行中）失败或-“not-a-supported-wheel”-解决方案！/1.png" alt="img"></p><p>然后，google了一下，解决了~</p><p>因为我的pip的版本是V10，应该使用下面的命令：</p><p>import pip._internal; print(pip._internal.pep425tags.get_supported())</p><p><img src="/2018/07/17/python3-使用pip安装（命令行中）失败或-“not-a-supported-wheel”-解决方案！/2.png" alt="img"></p><p>嘿嘿~~</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python3-使用pip安装（命令行中）失败或-“not-a-supported-wheel”-解决方案！&quot;&gt;&lt;a href=&quot;#python3-使用pip安装（命令行中）失败或-“not-a-supported-wheel”-解决方案！&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="Python3笔记" scheme="http://yoursite.com/categories/Python3%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python3" scheme="http://yoursite.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>快速查看linux命令常用用法---------tldr</title>
    <link href="http://yoursite.com/2018/07/05/TLDR/"/>
    <id>http://yoursite.com/2018/07/05/TLDR/</id>
    <published>2018-07-05T07:13:25.000Z</published>
    <updated>2020-02-25T05:53:47.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前我们如果用一个命令，但是忘了具体的参数是什么的时候，通常会用man，比如：</p><p><code>man tar</code></p><p>这样，man就会告诉我们<strong>tar</strong>的具体用法，但是man有时候特别的冗长，你要找到想要的例子非常困难，所以tldr命令就是一个很好的补充，tldr会告诉你一些<strong>tar</strong>的常用例子和用法。</p><h3 id="安装tldr"><a href="#安装tldr" class="headerlink" title="安装tldr"></a>安装tldr</h3><p>安装tldr特别简单，具体命令如下：</p><p><code>sudo curl -o /usr/local/bin/tldr https://raw.githubusercontent.com/raylee/tldr/master/tldr &amp;&amp; sudo chmod +x /usr/local/bin/tldr</code></p><p>这样，tldr就安装完成了，下面我们来使用tldr查看find命令的常用用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[dazhan@ecs47.101.138.203 ~]$ tldr find</span><br><span class="line">find</span><br><span class="line"></span><br><span class="line">Find files or directories under the given directory tree, recursively.</span><br><span class="line"></span><br><span class="line">- Find files by extension:</span><br><span class="line">  find root_path -name '*.ext'</span><br><span class="line"></span><br><span class="line">- Find files by matching multiple patterns:</span><br><span class="line">  find root_path -name '*pattern_1*' -or -name '*pattern_2*'</span><br><span class="line"></span><br><span class="line">- Find directories matching a given name:</span><br><span class="line">  find root_path -type d -name *lib*</span><br><span class="line"></span><br><span class="line">- Find files matching path pattern:</span><br><span class="line">  find root_path -path '**/lib/**/*.ext'</span><br><span class="line"></span><br><span class="line">- Run a command for each file, use &#123;&#125; within the command to access the filename:</span><br><span class="line">  find root_path -name '*.ext' -exec wc -l &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">- Find files modified in the last 24-hour period:</span><br><span class="line">  find root_path -mtime -1</span><br><span class="line"></span><br><span class="line">- Find files using case insensitive name matching, of a certain size:</span><br><span class="line">  find root_path -size +500k -size -10M -iname '*.TaR.gZ'</span><br><span class="line"></span><br><span class="line">- Delete files by name, older than 180 days:</span><br><span class="line">  find root_path -name '*.ext' -mtime +180 -delete</span><br><span class="line"></span><br><span class="line">- Find files matching a given pattern, while excluding specific paths:</span><br><span class="line">  find root_path -name '*.py' -not -path '*/site-packages/*'</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前我们如果用一个命令，但是忘了具体的参数是什么的时候，通常会用man，比如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;man tar&lt;/code&gt;&lt;/p
      
    
    </summary>
    
      <category term="Linux笔记" scheme="http://yoursite.com/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
</feed>
